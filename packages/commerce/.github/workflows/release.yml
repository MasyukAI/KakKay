name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: dom, curl, libxml, mbstring, zip
          coverage: none
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
      
      - name: Configure git
        run: |
          git config user.name "AIArmada Bot"
          git config user.email "bot@aiarmada.com"
      
      - name: Validate version
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z"
            exit 1
          fi
      
      - name: Update CHANGELOG.md
        run: |
          # Move Unreleased to new version
          VERSION="${{ inputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create new version section
          sed -i.bak "s/## \[Unreleased\]/## [Unreleased]\n\n## [$VERSION] - $DATE/" CHANGELOG.md
          rm CHANGELOG.md.bak
          
          # Commit changelog
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG for v$VERSION" || true
      
      - name: Run MonorepoBuilder release
        run: |
          # Update package versions and dependencies
          vendor/bin/monorepo-builder release ${{ inputs.version }} --ansi
      
      - name: Create and push tag
        run: |
          VERSION="${{ inputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin main
          git push origin "v$VERSION"
      
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ inputs.version }}"
          
          # Extract changelog for this version
          NOTES=$(awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '1d;$d')
          
          # Save to output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ inputs.version }}
          name: v${{ inputs.version }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      
      - name: Bump to next dev version
        run: |
          # Let monorepo-builder handle next dev version
          vendor/bin/monorepo-builder bump-interdependency "dev-main"
          
          git add .
          git commit -m "chore: bump to next dev version" || true
          git push origin main
