<?php

namespace MasyukAI\FilamentCartPlugin\Resources;

use Filament\Schemas\Schema;
use Filament\Schemas\Components\TextInput;
use Filament\Schemas\Components\Select;
use Filament\Schemas\Components\Textarea;
use Filament\Schemas\Components\Toggle;
use Filament\Schemas\Components\Section;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Columns\ToggleColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Filters\TernaryFilter;
use Filament\Actions\DeleteAction;
use Filament\Actions\EditAction;
use Filament\Actions\ViewAction;
use Filament\Resources\Resource;
use Filament\Support\Icons\Heroicon;
use MasyukAI\FilamentCartPlugin\Models\CartCondition;
use BackedEnum;
use UnitEnum;

class CartConditionResource extends Resource
{
    protected static ?string $model = CartCondition::class;

    protected static string|BackedEnum|null $navigationIcon = Heroicon::OutlinedAdjustmentsHorizontal;

    protected static string|UnitEnum|null $navigationGroup = 'E-commerce';

    protected static ?string $recordTitleAttribute = 'name';

    protected static ?string $navigationLabel = 'Cart Conditions';

    protected static ?string $modelLabel = 'Cart Condition';

    protected static ?string $pluralModelLabel = 'Cart Conditions';

    protected static ?int $navigationSort = 31;

    public static function form(Schema $schema): Schema
    {
        return $schema
            ->schema([
                Section::make('Condition Details')
                    ->schema([
                        TextInput::make('name')
                            ->required()
                            ->unique(ignoreRecord: true)
                            ->maxLength(255)
                            ->helperText('Unique identifier for this condition'),

                        Select::make('type')
                            ->required()
                            ->options([
                                'static' => 'Static - Manually defined rules',
                                'dynamic' => 'Dynamic - Auto-generated by system',
                            ])
                            ->default('static'),

                        Select::make('target')
                            ->required()
                            ->options([
                                'item' => 'Item Level - Applied to individual items',
                                'subtotal' => 'Subtotal - Applied to cart subtotal',
                                'total' => 'Total - Applied to final cart total',
                            ])
                            ->default('subtotal'),

                        TextInput::make('value')
                            ->required()
                            ->placeholder('e.g., +10, -15%, *1.5')
                            ->helperText('Use operators: + (add), - (subtract), * (multiply), / (divide), % (percentage)'),

                        Textarea::make('description')
                            ->rows(3)
                            ->helperText('Optional description of what this condition does'),
                    ])
                    ->columns(2),

                Section::make('Configuration')
                    ->schema([
                        Toggle::make('is_global')
                            ->label('Global Condition')
                            ->helperText('Apply this condition across all carts automatically'),

                        Toggle::make('is_active')
                            ->label('Active')
                            ->default(true)
                            ->helperText('Only active conditions are applied'),

                        TextInput::make('order')
                            ->numeric()
                            ->default(0)
                            ->helperText('Order in which conditions are applied (lower numbers first)'),
                    ])
                    ->columns(3),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('name')
                    ->searchable()
                    ->sortable()
                    ->weight('bold'),

                BadgeColumn::make('type')
                    ->colors([
                        'primary' => 'static',
                        'success' => 'dynamic',
                    ]),

                BadgeColumn::make('target')
                    ->colors([
                        'warning' => 'item',
                        'info' => 'subtotal',
                        'success' => 'total',
                    ]),

                TextColumn::make('value')
                    ->label('Value')
                    ->formatStateUsing(function ($record) {
                        return $record->formatted_value;
                    }),

                ToggleColumn::make('is_global')
                    ->label('Global'),

                ToggleColumn::make('is_active')
                    ->label('Active'),

                TextColumn::make('order')
                    ->alignCenter()
                    ->sortable(),

                TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(),
            ])
            ->filters([
                SelectFilter::make('type')
                    ->options([
                        'static' => 'Static',
                        'dynamic' => 'Dynamic',
                    ]),

                SelectFilter::make('target')
                    ->options([
                        'item' => 'Item Level',
                        'subtotal' => 'Subtotal',
                        'total' => 'Total',
                    ]),

                TernaryFilter::make('is_global')
                    ->label('Global Conditions')
                    ->placeholder('All conditions')
                    ->trueLabel('Global only')
                    ->falseLabel('Non-global only'),

                TernaryFilter::make('is_active')
                    ->label('Active Status')
                    ->placeholder('All conditions')
                    ->trueLabel('Active only')
                    ->falseLabel('Inactive only'),
            ])
            ->recordActions([
                ViewAction::make(),
                EditAction::make(),
                DeleteAction::make(),
            ])
            ->defaultSort('order', 'asc');
    }

    public static function getPages(): array
    {
        return [
            'index' => \MasyukAI\FilamentCartPlugin\Resources\CartConditionResource\Pages\ListCartConditions::route('/'),
            'create' => \MasyukAI\FilamentCartPlugin\Resources\CartConditionResource\Pages\CreateCartCondition::route('/create'),
            'view' => \MasyukAI\FilamentCartPlugin\Resources\CartConditionResource\Pages\ViewCartCondition::route('/{record}'),
            'edit' => \MasyukAI\FilamentCartPlugin\Resources\CartConditionResource\Pages\EditCartCondition::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::active()->count();
    }

    public static function getNavigationBadgeColor(): string|array|null
    {
        return 'success';
    }
}