/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/DataObjects/DataObjectsTest.php
 [x] `Purchase DataObject` → it creates a purchase from array data
 [x] `Purchase DataObject` → it handles nullable fields correctly
 [x] `Purchase DataObject` → it calculates amount in major currency units
 [x] `Payment DataObject` → it creates a payment from array data
 [x] `Payment DataObject` → it handles null payment method
 [x] `Payment DataObject` → it calculates net amount after fees
 [x] `Client DataObject` → it creates a client from array data
 [x] `Client DataObject` → it handles minimal client data
 [x] `SendInstruction DataObject` → it creates a send instruction from array data
 [x] `SendInstruction DataObject` → it handles rejected send instruction
 [x] `BankAccount DataObject` → it creates a bank account from array data
 [x] `BankAccount DataObject` → it handles unverified bank account
 [x] `Webhook DataObject` → it creates a webhook from array data
 [x] `Webhook DataObject` → it extracts purchase from webhook data
 [x] `Webhook DataObject` → it returns null for non-purchase webhook events

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Events/EventsTest.php
 [x] `PurchaseCreated Event` → it creates event with purchase data
 [x] `PurchaseCreated Event` → it implements ShouldBroadcast interface
 [x] `PurchaseCreated Event` → it broadcasts on purchase channel
 [x] `PurchaseCreated Event` → it broadcasts with correct data
 [x] `PurchasePaid Event` → it creates event with paid purchase data
 [x] `PurchasePaid Event` → it implements ShouldBroadcast interface
 [x] `PurchasePaid Event` → it broadcasts on purchase channel
 [x] `PurchasePaid Event` → it includes payment timestamp in broadcast data
 [x] `WebhookReceived Event` → it creates event with webhook data
 [x] `WebhookReceived Event` → it implements ShouldQueue interface for background processing
 [x] `WebhookReceived Event` → it stores raw webhook payload
 [x] `WebhookReceived Event` → it can determine webhook event type
 [x] `Event Broadcasting Configuration` → it uses correct queue for background events
 [x] `Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events
 [x] `Event Data Serialization` → it serializes purchase data correctly for broadcasting
 [x] `Event Data Serialization` → it includes event metadata in broadcast payload

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Exceptions/ExceptionsTest.php
 [x] `ChipApiException` → it creates exception with message and status code
 [x] `ChipApiException` → it stores error details from API response
 [x] `ChipApiException` → it handles empty error details
 [x] `ChipApiException` → it formats error message with details
 [x] `ChipApiException` → it creates exception from HTTP response
 [x] `ChipApiException` → it handles missing error message in response
 [x] `ChipValidationException` → it creates validation exception with field errors
 [x] `ChipValidationException` → it checks if specific field has error
 [x] `ChipValidationException` → it gets errors for specific field
 [x] `ChipValidationException` → it formats all validation errors as string
 [x] `ChipValidationException` → it creates exception from Laravel validator
 [x] `WebhookVerificationException` → it creates exception with verification failure message
 [x] `WebhookVerificationException` → it creates exception for missing signature
 [x] `WebhookVerificationException` → it creates exception for invalid signature format
 [x] `WebhookVerificationException` → it creates exception for signature verification failure
 [x] `WebhookVerificationException` → it creates exception for invalid payload
 [x] `WebhookVerificationException` → it creates exception for missing public key
 [x] `Exception Inheritance` → it extends appropriate base exception classes
 [x] `Exception Inheritance` → it implements custom exception interface if defined
 [x] `Exception Error Context` → it preserves original exception context
 [x] `Exception Error Context` → it maintains error context through exception chain

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Feature/IntegrationTest.php
 [x] `Package Integration Tests` → it loads package service provider correctly
 [x] `Package Integration Tests` → it registers package routes
 [x] `Package Integration Tests` → it publishes package migrations
 [x] `Package Integration Tests` → it configures package correctly from config file
 [x] `End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end
 [x] `End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end
 [x] `End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled
 [x] `Database Persistence Integration` → it stores webhook data in database
 [x] `Database Persistence Integration` → it stores purchase data in database

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Http/ChipCollectClientTest.php
 [x] `ChipCollectClient Authentication` → it adds bearer token to requests
 [x] `ChipCollectClient Authentication` → it sets correct content type
 [x] `ChipCollectClient Request Methods` → it can make GET requests
 [x] `ChipCollectClient Request Methods` → it can make POST requests
 [x] `ChipCollectClient Request Methods` → it can make PUT requests
 [x] `ChipCollectClient Request Methods` → it can make DELETE requests
 [x] `ChipCollectClient Error Handling` → it throws ChipApiException on 400 error
 [x] `ChipCollectClient Error Handling` → it throws ChipApiException on 401 error
 [x] `ChipCollectClient Error Handling` → it throws ChipApiException on 404 error
 [x] `ChipCollectClient Error Handling` → it throws ChipApiException on 500 error
 [x] `ChipCollectClient Error Handling` → it includes error details in exception
 [x] `ChipCollectClient Retry Logic` → it throws exception on server errors without retrying
 [x] `ChipCollectClient Retry Logic` → it gives up after max retries
 [x] `ChipCollectClient Configuration` → it uses configured base URL

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Http/ChipSendClientTest.php
 [x] `ChipSendClient Authentication` → it adds correct headers to requests
 [x] `ChipSendClient Authentication` → it generates valid HMAC signature
 [x] `ChipSendClient Authentication` → it includes API key in signature generation
 [x] `ChipSendClient Request Methods` → it can make GET requests
 [x] `ChipSendClient Request Methods` → it can make POST requests with JSON body
 [x] `ChipSendClient Error Handling` → it throws ChipValidationException with proper error details
 [x] `ChipSendClient Error Handling` → it handles network timeouts
 [x] `ChipSendClient URL Building` → it uses sandbox URL in test mode
 [x] `ChipSendClient URL Building` → it uses production URL in live mode
 [x] `ChipSendClient Timestamp Generation` → it generates current epoch timestamp

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Http/Requests/WebhookRequestTest.php
 [x] `WebhookRequest Validation` → it validates required event field
 [x] `WebhookRequest Validation` → it validates required data field
 [x] `WebhookRequest Validation` → it validates event field is string
 [x] `WebhookRequest Validation` → it validates data field is array
 [x] `WebhookRequest Validation` → it passes validation with valid data
 [x] `WebhookRequest Validation` → it allows optional timestamp field
 [x] `WebhookRequest Validation` → it validates timestamp format when provided
 [x] `WebhookRequest Authorization` → it always authorizes webhook requests
 [x] `WebhookRequest Custom Methods` → it extracts webhook signature from headers
 [x] `WebhookRequest Custom Methods` → it returns null when signature header is missing
 [x] `WebhookRequest Custom Methods` → it gets webhook event type
 [x] `WebhookRequest Custom Methods` → it gets webhook data payload
 [x] `WebhookRequest Custom Methods` → it checks if webhook is for specific event type
 [x] `WebhookRequest Custom Methods` → it checks if webhook is purchase related
 [x] `WebhookRequest Custom Methods` → it extracts purchase ID from purchase events
 [x] `WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Services/ChipCollectServiceTest.php
 [x] `ChipCollectService Public Key` → it returns the public key as a PEM string
 [x] `ChipCollectService Purchase Management` → it can create a purchase
 [x] `ChipCollectService Purchase Management` → it can retrieve a purchase
 [x] `ChipCollectService Purchase Management` → it can cancel a purchase
 [x] `ChipCollectService Purchase Management` → it can get payment methods
 [x] `ChipCollectService Client Management` → it can create a client
 [x] `ChipCollectService Client Management` → it can retrieve a client
 [x] `ChipCollectService Client Management` → it can list clients

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Services/ChipSendServiceTest.php
 [x] `ChipSendService` → it can create a send instruction
 [x] `ChipSendService` → it can retrieve a send instruction
 [x] `ChipSendService` → it can create a bank account

/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/tests/Services/WebhookServiceTest.php
 [x] `WebhookService` → it verifies valid webhook signatures
 [x] `WebhookService` → it processes webhook events
 [x] `WebhookService` → it uses configured public key when available

