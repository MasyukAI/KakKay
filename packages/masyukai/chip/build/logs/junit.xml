<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="PHPUnit tests">
  <testsuite name="" tests="115" assertions="275" errors="0" failures="0" skipped="0" time="9.495435">
    <testsuite name="Tests\DataObjects\DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php" tests="15" assertions="63" errors="0" failures="0" skipped="0" time="1.225842">
      <testcase name="`Purchase DataObject` → it creates a purchase from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it creates a purchase from array data" line="0" assertions="8" time="0.312089"/>
      <testcase name="`Purchase DataObject` → it handles nullable fields correctly" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it handles nullable fields correctly" line="0" assertions="4" time="0.059919"/>
      <testcase name="`Purchase DataObject` → it calculates amount in major currency units" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it calculates amount in major currency units" line="0" assertions="1" time="0.066545"/>
      <testcase name="`Payment DataObject` → it creates a payment from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it creates a payment from array data" line="0" assertions="7" time="0.050827"/>
      <testcase name="`Payment DataObject` → it handles null payment method" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it handles null payment method" line="0" assertions="2" time="0.067105"/>
      <testcase name="`Payment DataObject` → it calculates net amount after fees" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it calculates net amount after fees" line="0" assertions="2" time="0.079171"/>
      <testcase name="`Client DataObject` → it creates a client from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Client DataObject` → it creates a client from array data" line="0" assertions="7" time="0.069852"/>
      <testcase name="`Client DataObject` → it handles minimal client data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Client DataObject` → it handles minimal client data" line="0" assertions="4" time="0.082357"/>
      <testcase name="`SendInstruction DataObject` → it creates a send instruction from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`SendInstruction DataObject` → it creates a send instruction from array data" line="0" assertions="8" time="0.083382"/>
      <testcase name="`SendInstruction DataObject` → it handles rejected send instruction" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`SendInstruction DataObject` → it handles rejected send instruction" line="0" assertions="3" time="0.059725"/>
      <testcase name="`BankAccount DataObject` → it creates a bank account from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`BankAccount DataObject` → it creates a bank account from array data" line="0" assertions="7" time="0.074024"/>
      <testcase name="`BankAccount DataObject` → it handles unverified bank account" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`BankAccount DataObject` → it handles unverified bank account" line="0" assertions="3" time="0.056773"/>
      <testcase name="`Webhook DataObject` → it creates a webhook from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it creates a webhook from array data" line="0" assertions="3" time="0.062332"/>
      <testcase name="`Webhook DataObject` → it extracts purchase from webhook data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it extracts purchase from webhook data" line="0" assertions="3" time="0.055338"/>
      <testcase name="`Webhook DataObject` → it returns null for non-purchase webhook events" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it returns null for non-purchase webhook events" line="0" assertions="1" time="0.046402"/>
    </testsuite>
    <testsuite name="Tests\Events\EventsTest" file="tests/Events/EventsTest.php" tests="16" assertions="39" errors="0" failures="0" skipped="0" time="1.232575">
      <testcase name="`PurchaseCreated Event` → it creates event with purchase data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it creates event with purchase data" line="0" assertions="3" time="0.312183"/>
      <testcase name="`PurchaseCreated Event` → it implements ShouldBroadcast interface" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it implements ShouldBroadcast interface" line="0" assertions="1" time="0.061413"/>
      <testcase name="`PurchaseCreated Event` → it broadcasts on purchase channel" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts on purchase channel" line="0" assertions="2" time="0.080781"/>
      <testcase name="`PurchaseCreated Event` → it broadcasts with correct data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts with correct data" line="0" assertions="3" time="0.063176"/>
      <testcase name="`PurchasePaid Event` → it creates event with paid purchase data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it creates event with paid purchase data" line="0" assertions="3" time="0.073058"/>
      <testcase name="`PurchasePaid Event` → it implements ShouldBroadcast interface" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it implements ShouldBroadcast interface" line="0" assertions="1" time="0.061554"/>
      <testcase name="`PurchasePaid Event` → it broadcasts on purchase channel" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it broadcasts on purchase channel" line="0" assertions="2" time="0.071753"/>
      <testcase name="`PurchasePaid Event` → it includes payment timestamp in broadcast data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it includes payment timestamp in broadcast data" line="0" assertions="3" time="0.068820"/>
      <testcase name="`WebhookReceived Event` → it creates event with webhook data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it creates event with webhook data" line="0" assertions="2" time="0.063107"/>
      <testcase name="`WebhookReceived Event` → it implements ShouldQueue interface for background processing" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it implements ShouldQueue interface for background processing" line="0" assertions="1" time="0.056969"/>
      <testcase name="`WebhookReceived Event` → it stores raw webhook payload" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it stores raw webhook payload" line="0" assertions="2" time="0.070756"/>
      <testcase name="`WebhookReceived Event` → it can determine webhook event type" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it can determine webhook event type" line="0" assertions="3" time="0.051483"/>
      <testcase name="`Event Broadcasting Configuration` → it uses correct queue for background events" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`Event Broadcasting Configuration` → it uses correct queue for background events" line="0" assertions="1" time="0.053641"/>
      <testcase name="`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" line="0" assertions="1" time="0.054903"/>
      <testcase name="`Event Data Serialization` → it serializes purchase data correctly for broadcasting" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`Event Data Serialization` → it serializes purchase data correctly for broadcasting" line="0" assertions="8" time="0.042857"/>
      <testcase name="`Event Data Serialization` → it includes event metadata in broadcast payload" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" file="tests/Events/EventsTest.php::`Event Data Serialization` → it includes event metadata in broadcast payload" line="0" assertions="3" time="0.046121"/>
    </testsuite>
    <testsuite name="Tests\Exceptions\ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php" tests="21" assertions="48" errors="0" failures="0" skipped="0" time="1.451645">
      <testcase name="`ChipApiException` → it creates exception with message and status code" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception with message and status code" line="0" assertions="3" time="0.311024"/>
      <testcase name="`ChipApiException` → it stores error details from API response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it stores error details from API response" line="0" assertions="2" time="0.063032"/>
      <testcase name="`ChipApiException` → it handles empty error details" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles empty error details" line="0" assertions="2" time="0.066526"/>
      <testcase name="`ChipApiException` → it formats error message with details" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it formats error message with details" line="0" assertions="3" time="0.069359"/>
      <testcase name="`ChipApiException` → it creates exception from HTTP response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception from HTTP response" line="0" assertions="3" time="0.069212"/>
      <testcase name="`ChipApiException` → it handles missing error message in response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles missing error message in response" line="0" assertions="2" time="0.068059"/>
      <testcase name="`ChipValidationException` → it creates validation exception with field errors" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates validation exception with field errors" line="0" assertions="2" time="0.077752"/>
      <testcase name="`ChipValidationException` → it checks if specific field has error" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it checks if specific field has error" line="0" assertions="2" time="0.056421"/>
      <testcase name="`ChipValidationException` → it gets errors for specific field" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it gets errors for specific field" line="0" assertions="2" time="0.066644"/>
      <testcase name="`ChipValidationException` → it formats all validation errors as string" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it formats all validation errors as string" line="0" assertions="2" time="0.064426"/>
      <testcase name="`ChipValidationException` → it creates exception from Laravel validator" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates exception from Laravel validator" line="0" assertions="4" time="0.081447"/>
      <testcase name="`WebhookVerificationException` → it creates exception with verification failure message" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception with verification failure message" line="0" assertions="2" time="0.065610"/>
      <testcase name="`WebhookVerificationException` → it creates exception for missing signature" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing signature" line="0" assertions="2" time="0.053653"/>
      <testcase name="`WebhookVerificationException` → it creates exception for invalid signature format" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid signature format" line="0" assertions="2" time="0.059949"/>
      <testcase name="`WebhookVerificationException` → it creates exception for signature verification failure" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for signature verification failure" line="0" assertions="2" time="0.044465"/>
      <testcase name="`WebhookVerificationException` → it creates exception for invalid payload" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid payload" line="0" assertions="2" time="0.039920"/>
      <testcase name="`WebhookVerificationException` → it creates exception for missing public key" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing public key" line="0" assertions="2" time="0.040710"/>
      <testcase name="`Exception Inheritance` → it extends appropriate base exception classes" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`Exception Inheritance` → it extends appropriate base exception classes" line="0" assertions="3" time="0.040121"/>
      <testcase name="`Exception Inheritance` → it implements custom exception interface if defined" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`Exception Inheritance` → it implements custom exception interface if defined" line="0" assertions="3" time="0.038427"/>
      <testcase name="`Exception Error Context` → it preserves original exception context" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`Exception Error Context` → it preserves original exception context" line="0" assertions="1" time="0.037579"/>
      <testcase name="`Exception Error Context` → it maintains error context through exception chain" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php::`Exception Error Context` → it maintains error context through exception chain" line="0" assertions="2" time="0.037309"/>
    </testsuite>
    <testsuite name="Tests\Feature\IntegrationTest" file="tests/Feature/IntegrationTest.php" tests="9" assertions="20" errors="0" failures="0" skipped="0" time="0.929866">
      <testcase name="`Package Integration Tests` → it loads package service provider correctly" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it loads package service provider correctly" line="0" assertions="3" time="0.311461"/>
      <testcase name="`Package Integration Tests` → it registers package routes" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it registers package routes" line="0" assertions="1" time="0.073907"/>
      <testcase name="`Package Integration Tests` → it publishes package migrations" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it publishes package migrations" line="0" assertions="6" time="0.070963"/>
      <testcase name="`Package Integration Tests` → it configures package correctly from config file" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it configures package correctly from config file" line="0" assertions="3" time="0.055323"/>
      <testcase name="`End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end" line="0" assertions="2" time="0.118802"/>
      <testcase name="`End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end" line="0" assertions="2" time="0.069543"/>
      <testcase name="`End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled" line="0" assertions="1" time="0.078716"/>
      <testcase name="`Database Persistence Integration` → it stores webhook data in database" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`Database Persistence Integration` → it stores webhook data in database" line="0" assertions="1" time="0.061569"/>
      <testcase name="`Database Persistence Integration` → it stores purchase data in database" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" file="tests/Feature/IntegrationTest.php::`Database Persistence Integration` → it stores purchase data in database" line="0" assertions="1" time="0.089583"/>
    </testsuite>
    <testsuite name="Tests\Http\ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php" tests="14" assertions="26" errors="0" failures="0" skipped="0" time="1.140223">
      <testcase name="`ChipCollectClient Authentication` → it adds bearer token to requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it adds bearer token to requests" line="0" assertions="1" time="0.323043"/>
      <testcase name="`ChipCollectClient Authentication` → it sets correct content type" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it sets correct content type" line="0" assertions="1" time="0.052716"/>
      <testcase name="`ChipCollectClient Request Methods` → it can make GET requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make GET requests" line="0" assertions="2" time="0.049027"/>
      <testcase name="`ChipCollectClient Request Methods` → it can make POST requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make POST requests" line="0" assertions="2" time="0.078953"/>
      <testcase name="`ChipCollectClient Request Methods` → it can make PUT requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make PUT requests" line="0" assertions="2" time="0.082507"/>
      <testcase name="`ChipCollectClient Request Methods` → it can make DELETE requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make DELETE requests" line="0" assertions="2" time="0.080369"/>
      <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" line="0" assertions="2" time="0.059479"/>
      <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" line="0" assertions="2" time="0.064466"/>
      <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" line="0" assertions="2" time="0.062594"/>
      <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 500 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 500 error" line="0" assertions="2" time="0.060022"/>
      <testcase name="`ChipCollectClient Error Handling` → it includes error details in exception" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it includes error details in exception" line="0" assertions="3" time="0.060562"/>
      <testcase name="`ChipCollectClient Retry Logic` → it throws exception on server errors without retrying" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it throws exception on server errors without retrying" line="0" assertions="3" time="0.049275"/>
      <testcase name="`ChipCollectClient Retry Logic` → it gives up after max retries" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it gives up after max retries" line="0" assertions="1" time="0.066872"/>
      <testcase name="`ChipCollectClient Configuration` → it uses configured base URL" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Configuration` → it uses configured base URL" line="0" assertions="1" time="0.050337"/>
    </testsuite>
    <testsuite name="Tests\Http\ChipSendClientTest" file="tests/Http/ChipSendClientTest.php" tests="10" assertions="14" errors="0" failures="0" skipped="0" time="0.964876">
      <testcase name="`ChipSendClient Authentication` → it adds correct headers to requests" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it adds correct headers to requests" line="0" assertions="1" time="0.323468"/>
      <testcase name="`ChipSendClient Authentication` → it generates valid HMAC signature" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it generates valid HMAC signature" line="0" assertions="1" time="0.078194"/>
      <testcase name="`ChipSendClient Authentication` → it includes API key in signature generation" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it includes API key in signature generation" line="0" assertions="1" time="0.062790"/>
      <testcase name="`ChipSendClient Request Methods` → it can make GET requests" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make GET requests" line="0" assertions="2" time="0.083276"/>
      <testcase name="`ChipSendClient Request Methods` → it can make POST requests with JSON body" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make POST requests with JSON body" line="0" assertions="2" time="0.080524"/>
      <testcase name="`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" line="0" assertions="3" time="0.060817"/>
      <testcase name="`ChipSendClient Error Handling` → it handles network timeouts" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Error Handling` → it handles network timeouts" line="0" assertions="1" time="0.073691"/>
      <testcase name="`ChipSendClient URL Building` → it uses sandbox URL in test mode" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses sandbox URL in test mode" line="0" assertions="1" time="0.063571"/>
      <testcase name="`ChipSendClient URL Building` → it uses production URL in live mode" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses production URL in live mode" line="0" assertions="1" time="0.071985"/>
      <testcase name="`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" line="0" assertions="1" time="0.066561"/>
    </testsuite>
    <testsuite name="Tests\Http\Requests\WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php" tests="16" assertions="23" errors="0" failures="0" skipped="0" time="1.231572">
      <testcase name="`WebhookRequest Validation` → it validates required event field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required event field" line="0" assertions="2" time="0.312372"/>
      <testcase name="`WebhookRequest Validation` → it validates required data field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required data field" line="0" assertions="2" time="0.069004"/>
      <testcase name="`WebhookRequest Validation` → it validates event field is string" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates event field is string" line="0" assertions="2" time="0.052499"/>
      <testcase name="`WebhookRequest Validation` → it validates data field is array" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates data field is array" line="0" assertions="2" time="0.076934"/>
      <testcase name="`WebhookRequest Validation` → it passes validation with valid data" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it passes validation with valid data" line="0" assertions="1" time="0.060999"/>
      <testcase name="`WebhookRequest Validation` → it allows optional timestamp field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it allows optional timestamp field" line="0" assertions="1" time="0.063732"/>
      <testcase name="`WebhookRequest Validation` → it validates timestamp format when provided" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates timestamp format when provided" line="0" assertions="2" time="0.064745"/>
      <testcase name="`WebhookRequest Authorization` → it always authorizes webhook requests" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Authorization` → it always authorizes webhook requests" line="0" assertions="1" time="0.053273"/>
      <testcase name="`WebhookRequest Custom Methods` → it extracts webhook signature from headers" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts webhook signature from headers" line="0" assertions="1" time="0.064161"/>
      <testcase name="`WebhookRequest Custom Methods` → it returns null when signature header is missing" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null when signature header is missing" line="0" assertions="1" time="0.072879"/>
      <testcase name="`WebhookRequest Custom Methods` → it gets webhook event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook event type" line="0" assertions="1" time="0.058259"/>
      <testcase name="`WebhookRequest Custom Methods` → it gets webhook data payload" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook data payload" line="0" assertions="1" time="0.055506"/>
      <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" line="0" assertions="2" time="0.069970"/>
      <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is purchase related" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is purchase related" line="0" assertions="2" time="0.064514"/>
      <testcase name="`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" line="0" assertions="1" time="0.045949"/>
      <testcase name="`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" line="0" assertions="1" time="0.046774"/>
    </testsuite>
    <testsuite name="Tests\Services\ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php" tests="8" assertions="23" errors="0" failures="0" skipped="0" time="0.806514">
      <testcase name="`ChipCollectService Public Key` → it returns the public key as a PEM string" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Public Key` → it returns the public key as a PEM string" line="0" assertions="3" time="0.316284"/>
      <testcase name="`ChipCollectService Purchase Management` → it can create a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can create a purchase" line="0" assertions="4" time="0.070119"/>
      <testcase name="`ChipCollectService Purchase Management` → it can retrieve a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can retrieve a purchase" line="0" assertions="3" time="0.072017"/>
      <testcase name="`ChipCollectService Purchase Management` → it can cancel a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can cancel a purchase" line="0" assertions="2" time="0.070118"/>
      <testcase name="`ChipCollectService Purchase Management` → it can get payment methods" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can get payment methods" line="0" assertions="2" time="0.077033"/>
      <testcase name="`ChipCollectService Client Management` → it can create a client" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can create a client" line="0" assertions="4" time="0.074792"/>
      <testcase name="`ChipCollectService Client Management` → it can retrieve a client" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can retrieve a client" line="0" assertions="3" time="0.079724"/>
      <testcase name="`ChipCollectService Client Management` → it can list clients" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can list clients" line="0" assertions="2" time="0.046428"/>
    </testsuite>
    <testsuite name="Tests\Services\ChipSendServiceTest" file="tests/Services/ChipSendServiceTest.php" tests="3" assertions="16" errors="0" failures="0" skipped="0" time="0.187205">
      <testcase name="`ChipSendService` → it can create a send instruction" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a send instruction" line="0" assertions="7" time="0.067796"/>
      <testcase name="`ChipSendService` → it can retrieve a send instruction" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can retrieve a send instruction" line="0" assertions="3" time="0.057244"/>
      <testcase name="`ChipSendService` → it can create a bank account" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a bank account" line="0" assertions="6" time="0.062164"/>
    </testsuite>
    <testsuite name="Tests\Services\WebhookServiceTest" file="tests/Services/WebhookServiceTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.325117">
      <testcase name="`WebhookService` → it verifies valid webhook signatures" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it verifies valid webhook signatures" line="0" assertions="1" time="0.068828"/>
      <testcase name="`WebhookService` → it processes webhook events" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it processes webhook events" line="0" assertions="1" time="0.061150"/>
      <testcase name="`WebhookService` → it uses configured public key when available" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it uses configured public key when available" line="0" assertions="1" time="0.195140"/>
    </testsuite>
  </testsuite>
</testsuites>
