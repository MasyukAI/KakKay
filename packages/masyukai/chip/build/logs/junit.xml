<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/phpunit.xml" tests="164" assertions="470" errors="0" failures="0" skipped="0" time="7.350611">
    <testsuite name="CHIP Package Test Suite" tests="164" assertions="470" errors="0" failures="0" skipped="0" time="7.350611">
      <testsuite name="Tests\Feature\Console\ChipHealthCheckCommandTest" file="tests/Feature/Console/ChipHealthCheckCommandTest.php" tests="6" assertions="16" errors="0" failures="0" skipped="0" time="0.473005">
        <testcase name="`ChipHealthCheckCommand` → it checks both CHIP Collect and Send APIs by default" file="tests/Feature/Console/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it checks both CHIP Collect and Send APIs by default" class="Tests\Feature\Console\ChipHealthCheckCommandTest" classname="Tests.Feature.Console.ChipHealthCheckCommandTest" assertions="4" time="0.328501"/>
        <testcase name="`ChipHealthCheckCommand` → it checks only CHIP Collect API with --collect flag" file="tests/Feature/Console/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it checks only CHIP Collect API with --collect flag" class="Tests\Feature\Console\ChipHealthCheckCommandTest" classname="Tests.Feature.Console.ChipHealthCheckCommandTest" assertions="3" time="0.028384"/>
        <testcase name="`ChipHealthCheckCommand` → it checks only CHIP Send API with --send flag" file="tests/Feature/Console/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it checks only CHIP Send API with --send flag" class="Tests\Feature\Console\ChipHealthCheckCommandTest" classname="Tests.Feature.Console.ChipHealthCheckCommandTest" assertions="3" time="0.027691"/>
        <testcase name="`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Collect API is unreachable" file="tests/Feature/Console/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Collect API is unreachable" class="Tests\Feature\Console\ChipHealthCheckCommandTest" classname="Tests.Feature.Console.ChipHealthCheckCommandTest" assertions="2" time="0.029445"/>
        <testcase name="`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Send API is unreachable" file="tests/Feature/Console/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Send API is unreachable" class="Tests\Feature\Console\ChipHealthCheckCommandTest" classname="Tests.Feature.Console.ChipHealthCheckCommandTest" assertions="2" time="0.030366"/>
        <testcase name="`ChipHealthCheckCommand` → it shows all systems operational when all checks pass" file="tests/Feature/Console/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it shows all systems operational when all checks pass" class="Tests\Feature\Console\ChipHealthCheckCommandTest" classname="Tests.Feature.Console.ChipHealthCheckCommandTest" assertions="2" time="0.028619"/>
      </testsuite>
      <testsuite name="Tests\Feature\PackageBootstrapTest" file="tests/Feature/PackageBootstrapTest.php" tests="4" assertions="13" errors="0" failures="0" skipped="0" time="0.113041">
        <testcase name="`Package bootstrap` → it binds collect, send and webhook services" file="tests/Feature/PackageBootstrapTest.php::`Package bootstrap` → it binds collect, send and webhook services" class="Tests\Feature\PackageBootstrapTest" classname="Tests.Feature.PackageBootstrapTest" assertions="3" time="0.031490"/>
        <testcase name="`Package bootstrap` → it registers the webhook route" file="tests/Feature/PackageBootstrapTest.php::`Package bootstrap` → it registers the webhook route" class="Tests\Feature\PackageBootstrapTest" classname="Tests.Feature.PackageBootstrapTest" assertions="1" time="0.026670"/>
        <testcase name="`Package bootstrap` → it migrates package tables" file="tests/Feature/PackageBootstrapTest.php::`Package bootstrap` → it migrates package tables" class="Tests\Feature\PackageBootstrapTest" classname="Tests.Feature.PackageBootstrapTest" assertions="6" time="0.027131"/>
        <testcase name="`Package bootstrap` → it loads configuration from chip config file" file="tests/Feature/PackageBootstrapTest.php::`Package bootstrap` → it loads configuration from chip config file" class="Tests\Feature\PackageBootstrapTest" classname="Tests.Feature.PackageBootstrapTest" assertions="3" time="0.027750"/>
      </testsuite>
      <testsuite name="Tests\Feature\Webhooks\WebhookProcessingTest" file="tests/Feature/Webhooks/WebhookProcessingTest.php" tests="4" assertions="6" errors="0" failures="0" skipped="0" time="0.161244">
        <testcase name="`Webhook processing` → it dispatches purchase.created events" file="tests/Feature/Webhooks/WebhookProcessingTest.php::`Webhook processing` → it dispatches purchase.created events" class="Tests\Feature\Webhooks\WebhookProcessingTest" classname="Tests.Feature.Webhooks.WebhookProcessingTest" assertions="2" time="0.072778"/>
        <testcase name="`Webhook processing` → it dispatches purchase.paid events" file="tests/Feature/Webhooks/WebhookProcessingTest.php::`Webhook processing` → it dispatches purchase.paid events" class="Tests\Feature\Webhooks\WebhookProcessingTest" classname="Tests.Feature.Webhooks.WebhookProcessingTest" assertions="2" time="0.027928"/>
        <testcase name="`Webhook processing` → it rejects requests without signatures when verification is enabled" file="tests/Feature/Webhooks/WebhookProcessingTest.php::`Webhook processing` → it rejects requests without signatures when verification is enabled" class="Tests\Feature\Webhooks\WebhookProcessingTest" classname="Tests.Feature.Webhooks.WebhookProcessingTest" assertions="1" time="0.031320"/>
        <testcase name="`Webhook processing` → it validates required payload fields" file="tests/Feature/Webhooks/WebhookProcessingTest.php::`Webhook processing` → it validates required payload fields" class="Tests\Feature\Webhooks\WebhookProcessingTest" classname="Tests.Feature.Webhooks.WebhookProcessingTest" assertions="1" time="0.029218"/>
      </testsuite>
      <testsuite name="Tests\Http\Requests\WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php" tests="16" assertions="23" errors="0" failures="0" skipped="0" time="0.711213">
        <testcase name="`WebhookRequest Validation` → it validates required event field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required event field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.028822"/>
        <testcase name="`WebhookRequest Validation` → it validates required data field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required data field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.026655"/>
        <testcase name="`WebhookRequest Validation` → it validates event field is string" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates event field is string" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.029417"/>
        <testcase name="`WebhookRequest Validation` → it validates data field is array" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates data field is array" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.026855"/>
        <testcase name="`WebhookRequest Validation` → it passes validation with valid data" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it passes validation with valid data" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.027747"/>
        <testcase name="`WebhookRequest Validation` → it allows optional timestamp field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it allows optional timestamp field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.030803"/>
        <testcase name="`WebhookRequest Validation` → it validates timestamp format when provided" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates timestamp format when provided" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.031408"/>
        <testcase name="`WebhookRequest Authorization` → it always authorizes webhook requests" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Authorization` → it always authorizes webhook requests" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.031722"/>
        <testcase name="`WebhookRequest Custom Methods` → it extracts webhook signature from headers" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts webhook signature from headers" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.033196"/>
        <testcase name="`WebhookRequest Custom Methods` → it returns null when signature header is missing" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null when signature header is missing" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.041715"/>
        <testcase name="`WebhookRequest Custom Methods` → it gets webhook event type" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.060402"/>
        <testcase name="`WebhookRequest Custom Methods` → it gets webhook data payload" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook data payload" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.067784"/>
        <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.066271"/>
        <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is purchase related" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is purchase related" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.068486"/>
        <testcase name="`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.070362"/>
        <testcase name="`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.069569"/>
      </testsuite>
      <testsuite name="Tests\Unit\Builders\PurchaseBuilderTest" file="tests/Unit/Builders/PurchaseBuilderTest.php" tests="19" assertions="70" errors="0" failures="0" skipped="0" time="0.610430">
        <testcase name="`PurchaseBuilder` → it can build a basic purchase with required fields" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can build a basic purchase with required fields" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="8" time="0.077652"/>
        <testcase name="`PurchaseBuilder` → it can add multiple products" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can add multiple products" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="3" time="0.041424"/>
        <testcase name="`PurchaseBuilder` → it can set customer details using customer method" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set customer details using customer method" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="1" time="0.035816"/>
        <testcase name="`PurchaseBuilder` → it can set billing address" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set billing address" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="10" time="0.030879"/>
        <testcase name="`PurchaseBuilder` → it can set shipping address" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set shipping address" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="10" time="0.030018"/>
        <testcase name="`PurchaseBuilder` → it can set all redirect URLs at once" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set all redirect URLs at once" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="6" time="0.030518"/>
        <testcase name="`PurchaseBuilder` → it can set individual redirect URLs" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set individual redirect URLs" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="6" time="0.028533"/>
        <testcase name="`PurchaseBuilder` → it can set webhook callback URL" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set webhook callback URL" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.026825"/>
        <testcase name="`PurchaseBuilder` → it can set reference" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set reference" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.026674"/>
        <testcase name="`PurchaseBuilder` → it can enable send receipt" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can enable send receipt" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.026731"/>
        <testcase name="`PurchaseBuilder` → it can enable pre-authorization" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can enable pre-authorization" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.026966"/>
        <testcase name="`PurchaseBuilder` → it can force recurring" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can force recurring" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.028794"/>
        <testcase name="`PurchaseBuilder` → it can set due date" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set due date" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.029337"/>
        <testcase name="`PurchaseBuilder` → it can set notes" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set notes" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.027246"/>
        <testcase name="`PurchaseBuilder` → it can override brand ID" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can override brand ID" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.029733"/>
        <testcase name="`PurchaseBuilder` → it can set client ID" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set client ID" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.028038"/>
        <testcase name="`PurchaseBuilder` → it supports method chaining for fluent API" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it supports method chaining for fluent API" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="4" time="0.028675"/>
        <testcase name="`PurchaseBuilder` → it can create purchase using create method" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can create purchase using create method" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.029551"/>
        <testcase name="`PurchaseBuilder` → it can create purchase using save method alias" file="tests/Unit/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can create purchase using save method alias" class="Tests\Unit\Builders\PurchaseBuilderTest" classname="Tests.Unit.Builders.PurchaseBuilderTest" assertions="2" time="0.027019"/>
      </testsuite>
      <testsuite name="Tests\Unit\Clients\ChipCollectClientTest" file="tests/Unit/Clients/ChipCollectClientTest.php" tests="12" assertions="23" errors="0" failures="0" skipped="0" time="2.386566">
        <testcase name="`ChipCollectClient Authentication` → it adds bearer token to requests" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it adds bearer token to requests" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="1" time="0.035827"/>
        <testcase name="`ChipCollectClient Authentication` → it sets correct content type" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it sets correct content type" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="1" time="0.026939"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make GET requests" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make GET requests" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.027983"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make POST requests" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make POST requests" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.027912"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make PUT requests" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make PUT requests" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.031562"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make DELETE requests" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make DELETE requests" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.029306"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.027564"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.030127"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="2" time="0.027120"/>
        <testcase name="`ChipCollectClient Error Handling` → it includes error details in exception" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it includes error details in exception" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="3" time="0.027411"/>
        <testcase name="`ChipCollectClient Retry Logic` → it retries on server errors and surfaces the exception" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it retries on server errors and surfaces the exception" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="3" time="2.056882"/>
        <testcase name="`ChipCollectClient Configuration` → it uses configured base URL" file="tests/Unit/Clients/ChipCollectClientTest.php::`ChipCollectClient Configuration` → it uses configured base URL" class="Tests\Unit\Clients\ChipCollectClientTest" classname="Tests.Unit.Clients.ChipCollectClientTest" assertions="1" time="0.037933"/>
      </testsuite>
      <testsuite name="Tests\Unit\Clients\ChipSendClientTest" file="tests/Unit/Clients/ChipSendClientTest.php" tests="9" assertions="13" errors="0" failures="0" skipped="0" time="0.253372">
        <testcase name="`ChipSendClient Authentication` → it adds correct headers to requests" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Authentication` → it adds correct headers to requests" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="1" time="0.032139"/>
        <testcase name="`ChipSendClient Authentication` → it generates valid HMAC signature" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Authentication` → it generates valid HMAC signature" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="1" time="0.026934"/>
        <testcase name="`ChipSendClient Request Methods` → it can make GET requests" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make GET requests" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="2" time="0.027172"/>
        <testcase name="`ChipSendClient Request Methods` → it can make POST requests with JSON body" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make POST requests with JSON body" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="2" time="0.026827"/>
        <testcase name="`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="3" time="0.029357"/>
        <testcase name="`ChipSendClient Error Handling` → it handles network timeouts" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Error Handling` → it handles network timeouts" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="1" time="0.027133"/>
        <testcase name="`ChipSendClient URL Building` → it uses sandbox URL in test mode" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses sandbox URL in test mode" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="1" time="0.026886"/>
        <testcase name="`ChipSendClient URL Building` → it uses production URL in live mode" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses production URL in live mode" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="1" time="0.029988"/>
        <testcase name="`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" file="tests/Unit/Clients/ChipSendClientTest.php::`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" class="Tests\Unit\Clients\ChipSendClientTest" classname="Tests.Unit.Clients.ChipSendClientTest" assertions="1" time="0.026936"/>
      </testsuite>
      <testsuite name="Tests\Unit\DataObjects\BankAccountDataObjectTest" file="tests/Unit/DataObjects/BankAccountDataObjectTest.php" tests="2" assertions="10" errors="0" failures="0" skipped="0" time="0.057750">
        <testcase name="`BankAccount data object` → it creates a bank account from array data" file="tests/Unit/DataObjects/BankAccountDataObjectTest.php::`BankAccount data object` → it creates a bank account from array data" class="Tests\Unit\DataObjects\BankAccountDataObjectTest" classname="Tests.Unit.DataObjects.BankAccountDataObjectTest" assertions="7" time="0.031042"/>
        <testcase name="`BankAccount data object` → it handles unverified bank account" file="tests/Unit/DataObjects/BankAccountDataObjectTest.php::`BankAccount data object` → it handles unverified bank account" class="Tests\Unit\DataObjects\BankAccountDataObjectTest" classname="Tests.Unit.DataObjects.BankAccountDataObjectTest" assertions="3" time="0.026708"/>
      </testsuite>
      <testsuite name="Tests\Unit\DataObjects\ClientDataObjectTest" file="tests/Unit/DataObjects/ClientDataObjectTest.php" tests="2" assertions="11" errors="0" failures="0" skipped="0" time="0.055262">
        <testcase name="`Client data object` → it creates a client from array data" file="tests/Unit/DataObjects/ClientDataObjectTest.php::`Client data object` → it creates a client from array data" class="Tests\Unit\DataObjects\ClientDataObjectTest" classname="Tests.Unit.DataObjects.ClientDataObjectTest" assertions="7" time="0.028728"/>
        <testcase name="`Client data object` → it handles minimal client data" file="tests/Unit/DataObjects/ClientDataObjectTest.php::`Client data object` → it handles minimal client data" class="Tests\Unit\DataObjects\ClientDataObjectTest" classname="Tests.Unit.DataObjects.ClientDataObjectTest" assertions="4" time="0.026534"/>
      </testsuite>
      <testsuite name="Tests\Unit\DataObjects\PaymentDataObjectTest" file="tests/Unit/DataObjects/PaymentDataObjectTest.php" tests="3" assertions="11" errors="0" failures="0" skipped="0" time="0.082052">
        <testcase name="`Payment data object` → it creates a payment from array data" file="tests/Unit/DataObjects/PaymentDataObjectTest.php::`Payment data object` → it creates a payment from array data" class="Tests\Unit\DataObjects\PaymentDataObjectTest" classname="Tests.Unit.DataObjects.PaymentDataObjectTest" assertions="7" time="0.028724"/>
        <testcase name="`Payment data object` → it handles null payment method" file="tests/Unit/DataObjects/PaymentDataObjectTest.php::`Payment data object` → it handles null payment method" class="Tests\Unit\DataObjects\PaymentDataObjectTest" classname="Tests.Unit.DataObjects.PaymentDataObjectTest" assertions="2" time="0.026657"/>
        <testcase name="`Payment data object` → it calculates net amount after fees" file="tests/Unit/DataObjects/PaymentDataObjectTest.php::`Payment data object` → it calculates net amount after fees" class="Tests\Unit\DataObjects\PaymentDataObjectTest" classname="Tests.Unit.DataObjects.PaymentDataObjectTest" assertions="2" time="0.026671"/>
      </testsuite>
      <testsuite name="Tests\Unit\DataObjects\PurchaseDataObjectTest" file="tests/Unit/DataObjects/PurchaseDataObjectTest.php" tests="3" assertions="13" errors="0" failures="0" skipped="0" time="0.083135">
        <testcase name="`Purchase data object` → it creates a purchase from array data" file="tests/Unit/DataObjects/PurchaseDataObjectTest.php::`Purchase data object` → it creates a purchase from array data" class="Tests\Unit\DataObjects\PurchaseDataObjectTest" classname="Tests.Unit.DataObjects.PurchaseDataObjectTest" assertions="8" time="0.029969"/>
        <testcase name="`Purchase data object` → it handles nullable fields correctly" file="tests/Unit/DataObjects/PurchaseDataObjectTest.php::`Purchase data object` → it handles nullable fields correctly" class="Tests\Unit\DataObjects\PurchaseDataObjectTest" classname="Tests.Unit.DataObjects.PurchaseDataObjectTest" assertions="4" time="0.026565"/>
        <testcase name="`Purchase data object` → it calculates amount in major currency units" file="tests/Unit/DataObjects/PurchaseDataObjectTest.php::`Purchase data object` → it calculates amount in major currency units" class="Tests\Unit\DataObjects\PurchaseDataObjectTest" classname="Tests.Unit.DataObjects.PurchaseDataObjectTest" assertions="1" time="0.026601"/>
      </testsuite>
      <testsuite name="Tests\Unit\DataObjects\SendInstructionDataObjectTest" file="tests/Unit/DataObjects/SendInstructionDataObjectTest.php" tests="2" assertions="11" errors="0" failures="0" skipped="0" time="0.055927">
        <testcase name="`SendInstruction data object` → it creates a send instruction from array data" file="tests/Unit/DataObjects/SendInstructionDataObjectTest.php::`SendInstruction data object` → it creates a send instruction from array data" class="Tests\Unit\DataObjects\SendInstructionDataObjectTest" classname="Tests.Unit.DataObjects.SendInstructionDataObjectTest" assertions="8" time="0.029206"/>
        <testcase name="`SendInstruction data object` → it handles rejected send instruction" file="tests/Unit/DataObjects/SendInstructionDataObjectTest.php::`SendInstruction data object` → it handles rejected send instruction" class="Tests\Unit\DataObjects\SendInstructionDataObjectTest" classname="Tests.Unit.DataObjects.SendInstructionDataObjectTest" assertions="3" time="0.026722"/>
      </testsuite>
      <testsuite name="Tests\Unit\DataObjects\WebhookDataObjectTest" file="tests/Unit/DataObjects/WebhookDataObjectTest.php" tests="3" assertions="7" errors="0" failures="0" skipped="0" time="0.082773">
        <testcase name="`Webhook data object` → it creates a webhook from array data" file="tests/Unit/DataObjects/WebhookDataObjectTest.php::`Webhook data object` → it creates a webhook from array data" class="Tests\Unit\DataObjects\WebhookDataObjectTest" classname="Tests.Unit.DataObjects.WebhookDataObjectTest" assertions="3" time="0.028637"/>
        <testcase name="`Webhook data object` → it extracts purchase from webhook data" file="tests/Unit/DataObjects/WebhookDataObjectTest.php::`Webhook data object` → it extracts purchase from webhook data" class="Tests\Unit\DataObjects\WebhookDataObjectTest" classname="Tests.Unit.DataObjects.WebhookDataObjectTest" assertions="3" time="0.027393"/>
        <testcase name="`Webhook data object` → it returns null for non-purchase webhook events" file="tests/Unit/DataObjects/WebhookDataObjectTest.php::`Webhook data object` → it returns null for non-purchase webhook events" class="Tests\Unit\DataObjects\WebhookDataObjectTest" classname="Tests.Unit.DataObjects.WebhookDataObjectTest" assertions="1" time="0.026744"/>
      </testsuite>
      <testsuite name="Tests\Unit\Enums\BankAccountStatusTest" file="tests/Unit/Enums/BankAccountStatusTest.php" tests="6" assertions="16" errors="0" failures="0" skipped="0" time="0.162007">
        <testcase name="`BankAccountStatus Enum` → it has all 3 official CHIP bank account statuses" file="tests/Unit/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it has all 3 official CHIP bank account statuses" class="Tests\Unit\Enums\BankAccountStatusTest" classname="Tests.Unit.Enums.BankAccountStatusTest" assertions="2" time="0.028666"/>
        <testcase name="`BankAccountStatus Enum` → it can be created from string value" file="tests/Unit/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it can be created from string value" class="Tests\Unit\Enums\BankAccountStatusTest" classname="Tests.Unit.Enums.BankAccountStatusTest" assertions="2" time="0.026715"/>
        <testcase name="`BankAccountStatus Enum` → it provides human-readable labels" file="tests/Unit/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it provides human-readable labels" class="Tests\Unit\Enums\BankAccountStatusTest" classname="Tests.Unit.Enums.BankAccountStatusTest" assertions="3" time="0.026584"/>
        <testcase name="`BankAccountStatus Enum` → it correctly identifies verified status" file="tests/Unit/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it correctly identifies verified status" class="Tests\Unit\Enums\BankAccountStatusTest" classname="Tests.Unit.Enums.BankAccountStatusTest" assertions="3" time="0.026575"/>
        <testcase name="`BankAccountStatus Enum` → it correctly identifies pending status" file="tests/Unit/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it correctly identifies pending status" class="Tests\Unit\Enums\BankAccountStatusTest" classname="Tests.Unit.Enums.BankAccountStatusTest" assertions="3" time="0.026699"/>
        <testcase name="`BankAccountStatus Enum` → it correctly identifies rejected status" file="tests/Unit/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it correctly identifies rejected status" class="Tests\Unit\Enums\BankAccountStatusTest" classname="Tests.Unit.Enums.BankAccountStatusTest" assertions="3" time="0.026769"/>
      </testsuite>
      <testsuite name="Tests\Unit\Enums\PurchaseStatusTest" file="tests/Unit/Enums/PurchaseStatusTest.php" tests="12" assertions="73" errors="0" failures="0" skipped="0" time="0.332682">
        <testcase name="`PurchaseStatus Enum` → it has all 26 official CHIP purchase statuses" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it has all 26 official CHIP purchase statuses" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="2" time="0.032820"/>
        <testcase name="`PurchaseStatus Enum` → it can be created from string value" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it can be created from string value" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="2" time="0.026724"/>
        <testcase name="`PurchaseStatus Enum` → it provides human-readable labels" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it provides human-readable labels" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="3" time="0.026715"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies successful statuses" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies successful statuses" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="7" time="0.026688"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies pending statuses" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies pending statuses" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="9" time="0.026763"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies failed statuses" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies failed statuses" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="5" time="0.026886"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be cancelled" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be cancelled" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="5" time="0.026638"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be captured" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be captured" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="5" time="0.026688"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be released" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be released" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="4" time="0.026637"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be refunded" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be refunded" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="5" time="0.027153"/>
        <testcase name="`PurchaseStatus Enum` → it has all new official statuses that were previously missing" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it has all new official statuses that were previously missing" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="24" time="0.032167"/>
        <testcase name="`PurchaseStatus Enum` → it does not have fake undocumented statuses" file="tests/Unit/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it does not have fake undocumented statuses" class="Tests\Unit\Enums\PurchaseStatusTest" classname="Tests.Unit.Enums.PurchaseStatusTest" assertions="2" time="0.026802"/>
      </testsuite>
      <testsuite name="Tests\Unit\Enums\SendInstructionStateTest" file="tests/Unit/Enums/SendInstructionStateTest.php" tests="7" assertions="23" errors="0" failures="0" skipped="0" time="0.195128">
        <testcase name="`SendInstructionState Enum` → it has all 8 official CHIP send instruction states" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it has all 8 official CHIP send instruction states" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="2" time="0.032454"/>
        <testcase name="`SendInstructionState Enum` → it can be created from string value" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it can be created from string value" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="2" time="0.026479"/>
        <testcase name="`SendInstructionState Enum` → it provides human-readable labels" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it provides human-readable labels" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="3" time="0.029433"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies successful states" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies successful states" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="4" time="0.026647"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies pending states" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies pending states" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="5" time="0.026734"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies failed states" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies failed states" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="3" time="0.026770"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies which instructions can be deleted" file="tests/Unit/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies which instructions can be deleted" class="Tests\Unit\Enums\SendInstructionStateTest" classname="Tests.Unit.Enums.SendInstructionStateTest" assertions="4" time="0.026611"/>
      </testsuite>
      <testsuite name="Tests\Unit\Events\EventsTest" file="tests/Unit/Events/EventsTest.php" tests="13" assertions="36" errors="0" failures="0" skipped="0" time="0.375376">
        <testcase name="`PurchaseCreated Event` → it creates event with purchase data" file="tests/Unit/Events/EventsTest.php::`PurchaseCreated Event` → it creates event with purchase data" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="3" time="0.031530"/>
        <testcase name="`PurchaseCreated Event` → it broadcasts on purchase channel" file="tests/Unit/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts on purchase channel" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="2" time="0.028584"/>
        <testcase name="`PurchaseCreated Event` → it broadcasts with correct data" file="tests/Unit/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts with correct data" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="3" time="0.028583"/>
        <testcase name="`PurchasePaid Event` → it creates event with paid purchase data" file="tests/Unit/Events/EventsTest.php::`PurchasePaid Event` → it creates event with paid purchase data" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="3" time="0.028515"/>
        <testcase name="`PurchasePaid Event` → it broadcasts on purchase channel" file="tests/Unit/Events/EventsTest.php::`PurchasePaid Event` → it broadcasts on purchase channel" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="2" time="0.028123"/>
        <testcase name="`PurchasePaid Event` → it includes payment timestamp in broadcast data" file="tests/Unit/Events/EventsTest.php::`PurchasePaid Event` → it includes payment timestamp in broadcast data" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="3" time="0.028791"/>
        <testcase name="`WebhookReceived Event` → it creates event with webhook data" file="tests/Unit/Events/EventsTest.php::`WebhookReceived Event` → it creates event with webhook data" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="2" time="0.028404"/>
        <testcase name="`WebhookReceived Event` → it stores raw webhook payload" file="tests/Unit/Events/EventsTest.php::`WebhookReceived Event` → it stores raw webhook payload" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="2" time="0.027973"/>
        <testcase name="`WebhookReceived Event` → it can determine webhook event type" file="tests/Unit/Events/EventsTest.php::`WebhookReceived Event` → it can determine webhook event type" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="3" time="0.032078"/>
        <testcase name="`Event Broadcasting Configuration` → it uses correct queue for background events" file="tests/Unit/Events/EventsTest.php::`Event Broadcasting Configuration` → it uses correct queue for background events" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="1" time="0.028241"/>
        <testcase name="`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" file="tests/Unit/Events/EventsTest.php::`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="1" time="0.028484"/>
        <testcase name="`Event Data Serialization` → it serializes purchase data correctly for broadcasting" file="tests/Unit/Events/EventsTest.php::`Event Data Serialization` → it serializes purchase data correctly for broadcasting" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="8" time="0.027662"/>
        <testcase name="`Event Data Serialization` → it includes event metadata in broadcast payload" file="tests/Unit/Events/EventsTest.php::`Event Data Serialization` → it includes event metadata in broadcast payload" class="Tests\Unit\Events\EventsTest" classname="Tests.Unit.Events.EventsTest" assertions="3" time="0.028407"/>
      </testsuite>
      <testsuite name="Tests\Unit\Exceptions\ExceptionsTest" file="tests/Unit/Exceptions/ExceptionsTest.php" tests="19" assertions="42" errors="0" failures="0" skipped="0" time="0.523010">
        <testcase name="`ChipApiException` → it creates exception with message and status code" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception with message and status code" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="3" time="0.032974"/>
        <testcase name="`ChipApiException` → it stores error details from API response" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipApiException` → it stores error details from API response" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026751"/>
        <testcase name="`ChipApiException` → it handles empty error details" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles empty error details" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026679"/>
        <testcase name="`ChipApiException` → it formats error message with details" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipApiException` → it formats error message with details" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="3" time="0.026682"/>
        <testcase name="`ChipApiException` → it creates exception from HTTP response" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception from HTTP response" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="3" time="0.026987"/>
        <testcase name="`ChipApiException` → it handles missing error message in response" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles missing error message in response" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026755"/>
        <testcase name="`ChipValidationException` → it creates validation exception with field errors" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates validation exception with field errors" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026707"/>
        <testcase name="`ChipValidationException` → it checks if specific field has error" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipValidationException` → it checks if specific field has error" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026882"/>
        <testcase name="`ChipValidationException` → it gets errors for specific field" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipValidationException` → it gets errors for specific field" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.029904"/>
        <testcase name="`ChipValidationException` → it formats all validation errors as string" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipValidationException` → it formats all validation errors as string" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026995"/>
        <testcase name="`ChipValidationException` → it creates exception from Laravel validator" file="tests/Unit/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates exception from Laravel validator" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="4" time="0.027512"/>
        <testcase name="`WebhookVerificationException` → it creates exception with verification failure message" file="tests/Unit/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception with verification failure message" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.027852"/>
        <testcase name="`WebhookVerificationException` → it creates exception for missing signature" file="tests/Unit/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing signature" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026932"/>
        <testcase name="`WebhookVerificationException` → it creates exception for invalid signature format" file="tests/Unit/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid signature format" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.028125"/>
        <testcase name="`WebhookVerificationException` → it creates exception for signature verification failure" file="tests/Unit/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for signature verification failure" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.027033"/>
        <testcase name="`WebhookVerificationException` → it creates exception for invalid payload" file="tests/Unit/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid payload" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026979"/>
        <testcase name="`WebhookVerificationException` → it creates exception for missing public key" file="tests/Unit/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing public key" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.027254"/>
        <testcase name="`Exception Error Context` → it preserves original exception context" file="tests/Unit/Exceptions/ExceptionsTest.php::`Exception Error Context` → it preserves original exception context" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="1" time="0.027045"/>
        <testcase name="`Exception Error Context` → it maintains error context through exception chain" file="tests/Unit/Exceptions/ExceptionsTest.php::`Exception Error Context` → it maintains error context through exception chain" class="Tests\Unit\Exceptions\ExceptionsTest" classname="Tests.Unit.Exceptions.ExceptionsTest" assertions="2" time="0.026964"/>
      </testsuite>
      <testsuite name="Tests\Unit\Jobs\ProcessChipWebhookTest" file="tests/Unit/Jobs/ProcessChipWebhookTest.php" tests="5" assertions="5" errors="0" failures="0" skipped="0" time="0.151431">
        <testcase name="`Webhook Queue Handler` → it dispatches webhook processing job when queue is enabled" file="tests/Unit/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it dispatches webhook processing job when queue is enabled" class="Tests\Unit\Jobs\ProcessChipWebhookTest" classname="Tests.Unit.Jobs.ProcessChipWebhookTest" assertions="1" time="0.040998"/>
        <testcase name="`Webhook Queue Handler` → it uses configured queue name" file="tests/Unit/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it uses configured queue name" class="Tests\Unit\Jobs\ProcessChipWebhookTest" classname="Tests.Unit.Jobs.ProcessChipWebhookTest" assertions="1" time="0.026863"/>
        <testcase name="`Webhook Queue Handler` → it has 3 retry attempts configured" file="tests/Unit/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it has 3 retry attempts configured" class="Tests\Unit\Jobs\ProcessChipWebhookTest" classname="Tests.Unit.Jobs.ProcessChipWebhookTest" assertions="1" time="0.029482"/>
        <testcase name="`Webhook Queue Handler` → it has 60 second timeout configured" file="tests/Unit/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it has 60 second timeout configured" class="Tests\Unit\Jobs\ProcessChipWebhookTest" classname="Tests.Unit.Jobs.ProcessChipWebhookTest" assertions="1" time="0.026906"/>
        <testcase name="`Webhook Queue Handler` → it dispatches WebhookReceived event after processing" file="tests/Unit/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it dispatches WebhookReceived event after processing" class="Tests\Unit\Jobs\ProcessChipWebhookTest" classname="Tests.Unit.Jobs.ProcessChipWebhookTest" assertions="1" time="0.027181"/>
      </testsuite>
      <testsuite name="Tests\Unit\Services\ChipCollectServiceTest" file="tests/Unit/Services/ChipCollectServiceTest.php" tests="9" assertions="26" errors="0" failures="0" skipped="0" time="0.248954">
        <testcase name="`ChipCollectService Public Key` → it returns the public key as a PEM string" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Public Key` → it returns the public key as a PEM string" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="3" time="0.031343"/>
        <testcase name="`ChipCollectService Purchase Management` → it can create a purchase" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can create a purchase" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="4" time="0.027301"/>
        <testcase name="`ChipCollectService Purchase Management` → it accepts an existing client reference without client payload" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it accepts an existing client reference without client payload" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="3" time="0.026828"/>
        <testcase name="`ChipCollectService Purchase Management` → it can retrieve a purchase" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can retrieve a purchase" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="3" time="0.026836"/>
        <testcase name="`ChipCollectService Purchase Management` → it can cancel a purchase" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can cancel a purchase" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="2" time="0.026661"/>
        <testcase name="`ChipCollectService Purchase Management` → it can get payment methods" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can get payment methods" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="2" time="0.028219"/>
        <testcase name="`ChipCollectService Client Management` → it can create a client" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can create a client" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="4" time="0.027426"/>
        <testcase name="`ChipCollectService Client Management` → it can retrieve a client" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can retrieve a client" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="3" time="0.027476"/>
        <testcase name="`ChipCollectService Client Management` → it can list clients" file="tests/Unit/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can list clients" class="Tests\Unit\Services\ChipCollectServiceTest" classname="Tests.Unit.Services.ChipCollectServiceTest" assertions="2" time="0.026866"/>
      </testsuite>
      <testsuite name="Tests\Unit\Services\ChipSendServiceTest" file="tests/Unit/Services/ChipSendServiceTest.php" tests="3" assertions="16" errors="0" failures="0" skipped="0" time="0.088330">
        <testcase name="`ChipSendService` → it can create a send instruction" file="tests/Unit/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a send instruction" class="Tests\Unit\Services\ChipSendServiceTest" classname="Tests.Unit.Services.ChipSendServiceTest" assertions="7" time="0.034319"/>
        <testcase name="`ChipSendService` → it can retrieve a send instruction" file="tests/Unit/Services/ChipSendServiceTest.php::`ChipSendService` → it can retrieve a send instruction" class="Tests\Unit\Services\ChipSendServiceTest" classname="Tests.Unit.Services.ChipSendServiceTest" assertions="3" time="0.027160"/>
        <testcase name="`ChipSendService` → it can create a bank account" file="tests/Unit/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a bank account" class="Tests\Unit\Services\ChipSendServiceTest" classname="Tests.Unit.Services.ChipSendServiceTest" assertions="6" time="0.026852"/>
      </testsuite>
      <testsuite name="Tests\Unit\Services\SubscriptionServiceTest" file="tests/Unit/Services/SubscriptionServiceTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.056787">
        <testcase name="it uses the CHIP brand id from the collect service when none is provided" file="tests/Unit/Services/SubscriptionServiceTest.php::it uses the CHIP brand id from the collect service when none is provided" class="Tests\Unit\Services\SubscriptionServiceTest" classname="Tests.Unit.Services.SubscriptionServiceTest" assertions="2" time="0.029998"/>
        <testcase name="it throws when no brand id can be resolved for subscription helpers" file="tests/Unit/Services/SubscriptionServiceTest.php::it throws when no brand id can be resolved for subscription helpers" class="Tests\Unit\Services\SubscriptionServiceTest" classname="Tests.Unit.Services.SubscriptionServiceTest" assertions="1" time="0.026789"/>
      </testsuite>
      <testsuite name="Tests\Unit\Services\WebhookServiceTest" file="tests/Unit/Services/WebhookServiceTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.091133">
        <testcase name="`WebhookService` → it verifies valid webhook signatures" file="tests/Unit/Services/WebhookServiceTest.php::`WebhookService` → it verifies valid webhook signatures" class="Tests\Unit\Services\WebhookServiceTest" classname="Tests.Unit.Services.WebhookServiceTest" assertions="1" time="0.027541"/>
        <testcase name="`WebhookService` → it processes webhook events" file="tests/Unit/Services/WebhookServiceTest.php::`WebhookService` → it processes webhook events" class="Tests\Unit\Services\WebhookServiceTest" classname="Tests.Unit.Services.WebhookServiceTest" assertions="1" time="0.027045"/>
        <testcase name="`WebhookService` → it uses configured public key when available" file="tests/Unit/Services/WebhookServiceTest.php::`WebhookService` → it uses configured public key when available" class="Tests\Unit\Services\WebhookServiceTest" classname="Tests.Unit.Services.WebhookServiceTest" assertions="1" time="0.036547"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
