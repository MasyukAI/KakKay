<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/phpunit.xml" tests="114" assertions="272" errors="0" failures="0" skipped="0" time="5.312191">
    <testsuite name="CHIP Package Test Suite" tests="114" assertions="272" errors="0" failures="0" skipped="0" time="5.312191">
      <testsuite name="Tests\DataObjects\DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php" tests="15" assertions="63" errors="0" failures="0" skipped="0" time="0.772200">
        <testcase name="`Purchase DataObject` → it creates a purchase from array data" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it creates a purchase from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="8" time="0.234799"/>
        <testcase name="`Purchase DataObject` → it handles nullable fields correctly" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it handles nullable fields correctly" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="4" time="0.038521"/>
        <testcase name="`Purchase DataObject` → it calculates amount in major currency units" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it calculates amount in major currency units" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="1" time="0.037075"/>
        <testcase name="`Payment DataObject` → it creates a payment from array data" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it creates a payment from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="7" time="0.037141"/>
        <testcase name="`Payment DataObject` → it handles null payment method" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it handles null payment method" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="2" time="0.036364"/>
        <testcase name="`Payment DataObject` → it calculates net amount after fees" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it calculates net amount after fees" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="2" time="0.038758"/>
        <testcase name="`Client DataObject` → it creates a client from array data" file="tests/DataObjects/DataObjectsTest.php::`Client DataObject` → it creates a client from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="7" time="0.040764"/>
        <testcase name="`Client DataObject` → it handles minimal client data" file="tests/DataObjects/DataObjectsTest.php::`Client DataObject` → it handles minimal client data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="4" time="0.039668"/>
        <testcase name="`SendInstruction DataObject` → it creates a send instruction from array data" file="tests/DataObjects/DataObjectsTest.php::`SendInstruction DataObject` → it creates a send instruction from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="8" time="0.039731"/>
        <testcase name="`SendInstruction DataObject` → it handles failed send instruction" file="tests/DataObjects/DataObjectsTest.php::`SendInstruction DataObject` → it handles failed send instruction" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.038336"/>
        <testcase name="`BankAccount DataObject` → it creates a bank account from array data" file="tests/DataObjects/DataObjectsTest.php::`BankAccount DataObject` → it creates a bank account from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="7" time="0.038727"/>
        <testcase name="`BankAccount DataObject` → it handles unverified bank account" file="tests/DataObjects/DataObjectsTest.php::`BankAccount DataObject` → it handles unverified bank account" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.039683"/>
        <testcase name="`Webhook DataObject` → it creates a webhook from array data" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it creates a webhook from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.037821"/>
        <testcase name="`Webhook DataObject` → it extracts purchase from webhook data" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it extracts purchase from webhook data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.037454"/>
        <testcase name="`Webhook DataObject` → it returns null for non-purchase webhook events" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it returns null for non-purchase webhook events" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="1" time="0.037361"/>
      </testsuite>
      <testsuite name="Tests\Events\EventsTest" file="tests/Events/EventsTest.php" tests="16" assertions="39" errors="0" failures="0" skipped="0" time="0.643012">
        <testcase name="`PurchaseCreated Event` → it creates event with purchase data" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it creates event with purchase data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.060317"/>
        <testcase name="`PurchaseCreated Event` → it implements ShouldBroadcast interface" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it implements ShouldBroadcast interface" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.038638"/>
        <testcase name="`PurchaseCreated Event` → it broadcasts on purchase channel" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts on purchase channel" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.040442"/>
        <testcase name="`PurchaseCreated Event` → it broadcasts with correct data" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts with correct data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.038660"/>
        <testcase name="`PurchasePaid Event` → it creates event with paid purchase data" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it creates event with paid purchase data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.038634"/>
        <testcase name="`PurchasePaid Event` → it implements ShouldBroadcast interface" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it implements ShouldBroadcast interface" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.041647"/>
        <testcase name="`PurchasePaid Event` → it broadcasts on purchase channel" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it broadcasts on purchase channel" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.039271"/>
        <testcase name="`PurchasePaid Event` → it includes payment timestamp in broadcast data" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it includes payment timestamp in broadcast data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.039591"/>
        <testcase name="`WebhookReceived Event` → it creates event with webhook data" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it creates event with webhook data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.038946"/>
        <testcase name="`WebhookReceived Event` → it implements ShouldQueue interface for background processing" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it implements ShouldQueue interface for background processing" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.038062"/>
        <testcase name="`WebhookReceived Event` → it stores raw webhook payload" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it stores raw webhook payload" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.037640"/>
        <testcase name="`WebhookReceived Event` → it can determine webhook event type" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it can determine webhook event type" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.037556"/>
        <testcase name="`Event Broadcasting Configuration` → it uses correct queue for background events" file="tests/Events/EventsTest.php::`Event Broadcasting Configuration` → it uses correct queue for background events" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.038720"/>
        <testcase name="`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" file="tests/Events/EventsTest.php::`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.038831"/>
        <testcase name="`Event Data Serialization` → it serializes purchase data correctly for broadcasting" file="tests/Events/EventsTest.php::`Event Data Serialization` → it serializes purchase data correctly for broadcasting" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="8" time="0.038277"/>
        <testcase name="`Event Data Serialization` → it includes event metadata in broadcast payload" file="tests/Events/EventsTest.php::`Event Data Serialization` → it includes event metadata in broadcast payload" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.037780"/>
      </testsuite>
      <testsuite name="Tests\Exceptions\ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php" tests="21" assertions="48" errors="0" failures="0" skipped="0" time="0.839037">
        <testcase name="`ChipApiException` → it creates exception with message and status code" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception with message and status code" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.051796"/>
        <testcase name="`ChipApiException` → it stores error details from API response" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it stores error details from API response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037646"/>
        <testcase name="`ChipApiException` → it handles empty error details" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles empty error details" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037048"/>
        <testcase name="`ChipApiException` → it formats error message with details" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it formats error message with details" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.038181"/>
        <testcase name="`ChipApiException` → it creates exception from HTTP response" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception from HTTP response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.040664"/>
        <testcase name="`ChipApiException` → it handles missing error message in response" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles missing error message in response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037336"/>
        <testcase name="`ChipValidationException` → it creates validation exception with field errors" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates validation exception with field errors" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.038001"/>
        <testcase name="`ChipValidationException` → it checks if specific field has error" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it checks if specific field has error" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037319"/>
        <testcase name="`ChipValidationException` → it gets errors for specific field" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it gets errors for specific field" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037173"/>
        <testcase name="`ChipValidationException` → it formats all validation errors as string" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it formats all validation errors as string" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037384"/>
        <testcase name="`ChipValidationException` → it creates exception from Laravel validator" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates exception from Laravel validator" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="4" time="0.047013"/>
        <testcase name="`WebhookVerificationException` → it creates exception with verification failure message" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception with verification failure message" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037868"/>
        <testcase name="`WebhookVerificationException` → it creates exception for missing signature" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing signature" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.037421"/>
        <testcase name="`WebhookVerificationException` → it creates exception for invalid signature format" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid signature format" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.038265"/>
        <testcase name="`WebhookVerificationException` → it creates exception for signature verification failure" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for signature verification failure" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.038633"/>
        <testcase name="`WebhookVerificationException` → it creates exception for invalid payload" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid payload" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.040086"/>
        <testcase name="`WebhookVerificationException` → it creates exception for missing public key" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing public key" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.041069"/>
        <testcase name="`Exception Inheritance` → it extends appropriate base exception classes" file="tests/Exceptions/ExceptionsTest.php::`Exception Inheritance` → it extends appropriate base exception classes" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.040494"/>
        <testcase name="`Exception Inheritance` → it implements custom exception interface if defined" file="tests/Exceptions/ExceptionsTest.php::`Exception Inheritance` → it implements custom exception interface if defined" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.042372"/>
        <testcase name="`Exception Error Context` → it preserves original exception context" file="tests/Exceptions/ExceptionsTest.php::`Exception Error Context` → it preserves original exception context" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="1" time="0.042805"/>
        <testcase name="`Exception Error Context` → it maintains error context through exception chain" file="tests/Exceptions/ExceptionsTest.php::`Exception Error Context` → it maintains error context through exception chain" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.040463"/>
      </testsuite>
      <testsuite name="Tests\Feature\IntegrationTest" file="tests/Feature/IntegrationTest.php" tests="9" assertions="20" errors="0" failures="0" skipped="0" time="0.417832">
        <testcase name="`Package Integration Tests` → it loads package service provider correctly" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it loads package service provider correctly" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="3" time="0.054925"/>
        <testcase name="`Package Integration Tests` → it registers package routes" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it registers package routes" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.040043"/>
        <testcase name="`Package Integration Tests` → it publishes package migrations" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it publishes package migrations" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="6" time="0.040511"/>
        <testcase name="`Package Integration Tests` → it configures package correctly from config file" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it configures package correctly from config file" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="3" time="0.042711"/>
        <testcase name="`End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="2" time="0.079696"/>
        <testcase name="`End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="2" time="0.042358"/>
        <testcase name="`End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.041053"/>
        <testcase name="`Database Persistence Integration` → it stores webhook data in database" file="tests/Feature/IntegrationTest.php::`Database Persistence Integration` → it stores webhook data in database" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.038519"/>
        <testcase name="`Database Persistence Integration` → it stores purchase data in database" file="tests/Feature/IntegrationTest.php::`Database Persistence Integration` → it stores purchase data in database" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.038016"/>
      </testsuite>
      <testsuite name="Tests\Http\ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php" tests="14" assertions="26" errors="0" failures="0" skipped="0" time="0.734664">
        <testcase name="`ChipCollectClient Authentication` → it adds bearer token to requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it adds bearer token to requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.066880"/>
        <testcase name="`ChipCollectClient Authentication` → it sets correct content type" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it sets correct content type" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.037598"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make GET requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make GET requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.037676"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make POST requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make POST requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.037645"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make PUT requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make PUT requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.037520"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make DELETE requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make DELETE requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.038645"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.040468"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.040794"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.041211"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 500 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 500 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.056516"/>
        <testcase name="`ChipCollectClient Error Handling` → it includes error details in exception" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it includes error details in exception" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="3" time="0.058791"/>
        <testcase name="`ChipCollectClient Retry Logic` → it throws exception on server errors without retrying" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it throws exception on server errors without retrying" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="3" time="0.139755"/>
        <testcase name="`ChipCollectClient Retry Logic` → it gives up after max retries" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it gives up after max retries" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.055161"/>
        <testcase name="`ChipCollectClient Configuration` → it uses configured base URL" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Configuration` → it uses configured base URL" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.046003"/>
      </testsuite>
      <testsuite name="Tests\Http\ChipSendClientTest" file="tests/Http/ChipSendClientTest.php" tests="10" assertions="14" errors="0" failures="0" skipped="0" time="0.596120">
        <testcase name="`ChipSendClient Authentication` → it adds correct headers to requests" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it adds correct headers to requests" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.059400"/>
        <testcase name="`ChipSendClient Authentication` → it generates valid HMAC signature" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it generates valid HMAC signature" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.038350"/>
        <testcase name="`ChipSendClient Authentication` → it includes API key in signature generation" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it includes API key in signature generation" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.038269"/>
        <testcase name="`ChipSendClient Request Methods` → it can make GET requests" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make GET requests" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="2" time="0.047059"/>
        <testcase name="`ChipSendClient Request Methods` → it can make POST requests with JSON body" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make POST requests with JSON body" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="2" time="0.056305"/>
        <testcase name="`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="3" time="0.058138"/>
        <testcase name="`ChipSendClient Error Handling` → it handles network timeouts" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Error Handling` → it handles network timeouts" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.091528"/>
        <testcase name="`ChipSendClient URL Building` → it uses sandbox URL in test mode" file="tests/Http/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses sandbox URL in test mode" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.065225"/>
        <testcase name="`ChipSendClient URL Building` → it uses production URL in live mode" file="tests/Http/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses production URL in live mode" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.077313"/>
        <testcase name="`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.064533"/>
      </testsuite>
      <testsuite name="Tests\Http\Requests\WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php" tests="16" assertions="23" errors="0" failures="0" skipped="0" time="0.779570">
        <testcase name="`WebhookRequest Validation` → it validates required event field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required event field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.093891"/>
        <testcase name="`WebhookRequest Validation` → it validates required data field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required data field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.072785"/>
        <testcase name="`WebhookRequest Validation` → it validates event field is string" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates event field is string" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.050185"/>
        <testcase name="`WebhookRequest Validation` → it validates data field is array" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates data field is array" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.050687"/>
        <testcase name="`WebhookRequest Validation` → it passes validation with valid data" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it passes validation with valid data" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.046279"/>
        <testcase name="`WebhookRequest Validation` → it allows optional timestamp field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it allows optional timestamp field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.047672"/>
        <testcase name="`WebhookRequest Validation` → it validates timestamp format when provided" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates timestamp format when provided" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.058838"/>
        <testcase name="`WebhookRequest Authorization` → it always authorizes webhook requests" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Authorization` → it always authorizes webhook requests" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.046989"/>
        <testcase name="`WebhookRequest Custom Methods` → it extracts webhook signature from headers" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts webhook signature from headers" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.042740"/>
        <testcase name="`WebhookRequest Custom Methods` → it returns null when signature header is missing" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null when signature header is missing" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.038549"/>
        <testcase name="`WebhookRequest Custom Methods` → it gets webhook event type" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.038657"/>
        <testcase name="`WebhookRequest Custom Methods` → it gets webhook data payload" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook data payload" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.039473"/>
        <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.038207"/>
        <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is purchase related" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is purchase related" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.038061"/>
        <testcase name="`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.038386"/>
        <testcase name="`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.038170"/>
      </testsuite>
      <testsuite name="Tests\Services\ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php" tests="7" assertions="20" errors="0" failures="0" skipped="0" time="0.287872">
        <testcase name="`ChipCollectService Purchase Management` → it can create a purchase" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can create a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="4" time="0.060126"/>
        <testcase name="`ChipCollectService Purchase Management` → it can retrieve a purchase" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can retrieve a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="3" time="0.037886"/>
        <testcase name="`ChipCollectService Purchase Management` → it can cancel a purchase" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can cancel a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="2" time="0.037628"/>
        <testcase name="`ChipCollectService Purchase Management` → it can get payment methods" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can get payment methods" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="2" time="0.039063"/>
        <testcase name="`ChipCollectService Client Management` → it can create a client" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can create a client" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="4" time="0.037639"/>
        <testcase name="`ChipCollectService Client Management` → it can retrieve a client" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can retrieve a client" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="3" time="0.037748"/>
        <testcase name="`ChipCollectService Client Management` → it can list clients" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can list clients" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="2" time="0.037781"/>
      </testsuite>
      <testsuite name="Tests\Services\ChipSendServiceTest" file="tests/Services/ChipSendServiceTest.php" tests="3" assertions="16" errors="0" failures="0" skipped="0" time="0.119438">
        <testcase name="`ChipSendService` → it can create a send instruction" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a send instruction" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" assertions="7" time="0.044770"/>
        <testcase name="`ChipSendService` → it can retrieve a send instruction" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can retrieve a send instruction" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" assertions="3" time="0.037449"/>
        <testcase name="`ChipSendService` → it can create a bank account" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a bank account" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" assertions="6" time="0.037219"/>
      </testsuite>
      <testsuite name="Tests\Services\WebhookServiceTest" file="tests/Services/WebhookServiceTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.122445">
        <testcase name="`WebhookService` → it verifies valid webhook signatures" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it verifies valid webhook signatures" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" assertions="1" time="0.040567"/>
        <testcase name="`WebhookService` → it processes webhook events" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it processes webhook events" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" assertions="1" time="0.037822"/>
        <testcase name="`WebhookService` → it uses configured public key when available" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it uses configured public key when available" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" assertions="1" time="0.044056"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
