<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/Saiffil/Herd/kakkay/packages/masyukai/chip/phpunit.xml" tests="171" assertions="480" errors="0" failures="0" skipped="0" time="13.292324">
    <testsuite name="CHIP Package Test Suite" tests="171" assertions="480" errors="0" failures="0" skipped="0" time="13.292324">
      <testsuite name="Tests\Builders\PurchaseBuilderTest" file="tests/Builders/PurchaseBuilderTest.php" tests="19" assertions="70" errors="0" failures="0" skipped="0" time="1.496558">
        <testcase name="`PurchaseBuilder` → it can build a basic purchase with required fields" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can build a basic purchase with required fields" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="8" time="0.325452"/>
        <testcase name="`PurchaseBuilder` → it can add multiple products" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can add multiple products" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="3" time="0.062936"/>
        <testcase name="`PurchaseBuilder` → it can set customer details using customer method" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set customer details using customer method" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="1" time="0.062922"/>
        <testcase name="`PurchaseBuilder` → it can set billing address" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set billing address" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="10" time="0.065321"/>
        <testcase name="`PurchaseBuilder` → it can set shipping address" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set shipping address" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="10" time="0.064117"/>
        <testcase name="`PurchaseBuilder` → it can set all redirect URLs at once" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set all redirect URLs at once" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="6" time="0.067277"/>
        <testcase name="`PurchaseBuilder` → it can set individual redirect URLs" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set individual redirect URLs" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="6" time="0.065104"/>
        <testcase name="`PurchaseBuilder` → it can set webhook callback URL" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set webhook callback URL" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.062085"/>
        <testcase name="`PurchaseBuilder` → it can set reference" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set reference" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.065203"/>
        <testcase name="`PurchaseBuilder` → it can enable send receipt" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can enable send receipt" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.066922"/>
        <testcase name="`PurchaseBuilder` → it can enable pre-authorization" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can enable pre-authorization" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.063542"/>
        <testcase name="`PurchaseBuilder` → it can force recurring" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can force recurring" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.061964"/>
        <testcase name="`PurchaseBuilder` → it can set due date" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set due date" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.067851"/>
        <testcase name="`PurchaseBuilder` → it can set notes" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set notes" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.068465"/>
        <testcase name="`PurchaseBuilder` → it can override brand ID" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can override brand ID" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.063820"/>
        <testcase name="`PurchaseBuilder` → it can set client ID" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can set client ID" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.062226"/>
        <testcase name="`PurchaseBuilder` → it supports method chaining for fluent API" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it supports method chaining for fluent API" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="4" time="0.065227"/>
        <testcase name="`PurchaseBuilder` → it can create purchase using create method" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can create purchase using create method" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.070980"/>
        <testcase name="`PurchaseBuilder` → it can create purchase using save method alias" file="tests/Builders/PurchaseBuilderTest.php::`PurchaseBuilder` → it can create purchase using save method alias" class="Tests\Builders\PurchaseBuilderTest" classname="Tests.Builders.PurchaseBuilderTest" assertions="2" time="0.065146"/>
      </testsuite>
      <testsuite name="Tests\Commands\ChipHealthCheckCommandTest" file="tests/Commands/ChipHealthCheckCommandTest.php" tests="6" assertions="16" errors="0" failures="0" skipped="0" time="2.541750">
        <testcase name="`ChipHealthCheckCommand` → it checks both CHIP Collect and Send APIs by default" file="tests/Commands/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it checks both CHIP Collect and Send APIs by default" class="Tests\Commands\ChipHealthCheckCommandTest" classname="Tests.Commands.ChipHealthCheckCommandTest" assertions="4" time="0.128708"/>
        <testcase name="`ChipHealthCheckCommand` → it checks only CHIP Collect API with --collect flag" file="tests/Commands/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it checks only CHIP Collect API with --collect flag" class="Tests\Commands\ChipHealthCheckCommandTest" classname="Tests.Commands.ChipHealthCheckCommandTest" assertions="3" time="0.067352"/>
        <testcase name="`ChipHealthCheckCommand` → it checks only CHIP Send API with --send flag" file="tests/Commands/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it checks only CHIP Send API with --send flag" class="Tests\Commands\ChipHealthCheckCommandTest" classname="Tests.Commands.ChipHealthCheckCommandTest" assertions="3" time="0.067051"/>
        <testcase name="`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Collect API is unreachable" file="tests/Commands/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Collect API is unreachable" class="Tests\Commands\ChipHealthCheckCommandTest" classname="Tests.Commands.ChipHealthCheckCommandTest" assertions="2" time="1.091244"/>
        <testcase name="`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Send API is unreachable" file="tests/Commands/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it returns exit code 1 when CHIP Send API is unreachable" class="Tests\Commands\ChipHealthCheckCommandTest" classname="Tests.Commands.ChipHealthCheckCommandTest" assertions="2" time="1.113816"/>
        <testcase name="`ChipHealthCheckCommand` → it shows all systems operational when all checks pass" file="tests/Commands/ChipHealthCheckCommandTest.php::`ChipHealthCheckCommand` → it shows all systems operational when all checks pass" class="Tests\Commands\ChipHealthCheckCommandTest" classname="Tests.Commands.ChipHealthCheckCommandTest" assertions="2" time="0.073580"/>
      </testsuite>
      <testsuite name="Tests\DataObjects\DataObjectsTest" file="tests/DataObjects/DataObjectsTest.php" tests="15" assertions="63" errors="0" failures="0" skipped="0" time="0.884566">
        <testcase name="`Purchase DataObject` → it creates a purchase from array data" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it creates a purchase from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="8" time="0.068718"/>
        <testcase name="`Purchase DataObject` → it handles nullable fields correctly" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it handles nullable fields correctly" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="4" time="0.062680"/>
        <testcase name="`Purchase DataObject` → it calculates amount in major currency units" file="tests/DataObjects/DataObjectsTest.php::`Purchase DataObject` → it calculates amount in major currency units" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="1" time="0.056684"/>
        <testcase name="`Payment DataObject` → it creates a payment from array data" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it creates a payment from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="7" time="0.057110"/>
        <testcase name="`Payment DataObject` → it handles null payment method" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it handles null payment method" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="2" time="0.057016"/>
        <testcase name="`Payment DataObject` → it calculates net amount after fees" file="tests/DataObjects/DataObjectsTest.php::`Payment DataObject` → it calculates net amount after fees" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="2" time="0.056825"/>
        <testcase name="`Client DataObject` → it creates a client from array data" file="tests/DataObjects/DataObjectsTest.php::`Client DataObject` → it creates a client from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="7" time="0.059516"/>
        <testcase name="`Client DataObject` → it handles minimal client data" file="tests/DataObjects/DataObjectsTest.php::`Client DataObject` → it handles minimal client data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="4" time="0.056215"/>
        <testcase name="`SendInstruction DataObject` → it creates a send instruction from array data" file="tests/DataObjects/DataObjectsTest.php::`SendInstruction DataObject` → it creates a send instruction from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="8" time="0.057600"/>
        <testcase name="`SendInstruction DataObject` → it handles rejected send instruction" file="tests/DataObjects/DataObjectsTest.php::`SendInstruction DataObject` → it handles rejected send instruction" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.061878"/>
        <testcase name="`BankAccount DataObject` → it creates a bank account from array data" file="tests/DataObjects/DataObjectsTest.php::`BankAccount DataObject` → it creates a bank account from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="7" time="0.062156"/>
        <testcase name="`BankAccount DataObject` → it handles unverified bank account" file="tests/DataObjects/DataObjectsTest.php::`BankAccount DataObject` → it handles unverified bank account" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.057010"/>
        <testcase name="`Webhook DataObject` → it creates a webhook from array data" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it creates a webhook from array data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.057403"/>
        <testcase name="`Webhook DataObject` → it extracts purchase from webhook data" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it extracts purchase from webhook data" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="3" time="0.056834"/>
        <testcase name="`Webhook DataObject` → it returns null for non-purchase webhook events" file="tests/DataObjects/DataObjectsTest.php::`Webhook DataObject` → it returns null for non-purchase webhook events" class="Tests\DataObjects\DataObjectsTest" classname="Tests.DataObjects.DataObjectsTest" assertions="1" time="0.056921"/>
      </testsuite>
      <testsuite name="Tests\Enums\BankAccountStatusTest" file="tests/Enums/BankAccountStatusTest.php" tests="6" assertions="16" errors="0" failures="0" skipped="0" time="0.361155">
        <testcase name="`BankAccountStatus Enum` → it has all 3 official CHIP bank account statuses" file="tests/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it has all 3 official CHIP bank account statuses" class="Tests\Enums\BankAccountStatusTest" classname="Tests.Enums.BankAccountStatusTest" assertions="2" time="0.067908"/>
        <testcase name="`BankAccountStatus Enum` → it can be created from string value" file="tests/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it can be created from string value" class="Tests\Enums\BankAccountStatusTest" classname="Tests.Enums.BankAccountStatusTest" assertions="2" time="0.055662"/>
        <testcase name="`BankAccountStatus Enum` → it provides human-readable labels" file="tests/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it provides human-readable labels" class="Tests\Enums\BankAccountStatusTest" classname="Tests.Enums.BankAccountStatusTest" assertions="3" time="0.055610"/>
        <testcase name="`BankAccountStatus Enum` → it correctly identifies verified status" file="tests/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it correctly identifies verified status" class="Tests\Enums\BankAccountStatusTest" classname="Tests.Enums.BankAccountStatusTest" assertions="3" time="0.062742"/>
        <testcase name="`BankAccountStatus Enum` → it correctly identifies pending status" file="tests/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it correctly identifies pending status" class="Tests\Enums\BankAccountStatusTest" classname="Tests.Enums.BankAccountStatusTest" assertions="3" time="0.061643"/>
        <testcase name="`BankAccountStatus Enum` → it correctly identifies rejected status" file="tests/Enums/BankAccountStatusTest.php::`BankAccountStatus Enum` → it correctly identifies rejected status" class="Tests\Enums\BankAccountStatusTest" classname="Tests.Enums.BankAccountStatusTest" assertions="3" time="0.057591"/>
      </testsuite>
      <testsuite name="Tests\Enums\PurchaseStatusTest" file="tests/Enums/PurchaseStatusTest.php" tests="12" assertions="73" errors="0" failures="0" skipped="0" time="0.690343">
        <testcase name="`PurchaseStatus Enum` → it has all 26 official CHIP purchase statuses" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it has all 26 official CHIP purchase statuses" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="2" time="0.061605"/>
        <testcase name="`PurchaseStatus Enum` → it can be created from string value" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it can be created from string value" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="2" time="0.055664"/>
        <testcase name="`PurchaseStatus Enum` → it provides human-readable labels" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it provides human-readable labels" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="3" time="0.056961"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies successful statuses" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies successful statuses" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="7" time="0.056353"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies pending statuses" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies pending statuses" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="9" time="0.055841"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies failed statuses" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies failed statuses" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="5" time="0.058259"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be cancelled" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be cancelled" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="5" time="0.056802"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be captured" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be captured" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="5" time="0.056111"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be released" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be released" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="4" time="0.056370"/>
        <testcase name="`PurchaseStatus Enum` → it correctly identifies which purchases can be refunded" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it correctly identifies which purchases can be refunded" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="5" time="0.056640"/>
        <testcase name="`PurchaseStatus Enum` → it has all new official statuses that were previously missing" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it has all new official statuses that were previously missing" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="24" time="0.061489"/>
        <testcase name="`PurchaseStatus Enum` → it does not have fake undocumented statuses" file="tests/Enums/PurchaseStatusTest.php::`PurchaseStatus Enum` → it does not have fake undocumented statuses" class="Tests\Enums\PurchaseStatusTest" classname="Tests.Enums.PurchaseStatusTest" assertions="2" time="0.058250"/>
      </testsuite>
      <testsuite name="Tests\Enums\SendInstructionStateTest" file="tests/Enums/SendInstructionStateTest.php" tests="7" assertions="23" errors="0" failures="0" skipped="0" time="0.416552">
        <testcase name="`SendInstructionState Enum` → it has all 8 official CHIP send instruction states" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it has all 8 official CHIP send instruction states" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="2" time="0.065875"/>
        <testcase name="`SendInstructionState Enum` → it can be created from string value" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it can be created from string value" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="2" time="0.056389"/>
        <testcase name="`SendInstructionState Enum` → it provides human-readable labels" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it provides human-readable labels" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="3" time="0.056141"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies successful states" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies successful states" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="4" time="0.060681"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies pending states" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies pending states" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="5" time="0.059237"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies failed states" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies failed states" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="3" time="0.060777"/>
        <testcase name="`SendInstructionState Enum` → it correctly identifies which instructions can be deleted" file="tests/Enums/SendInstructionStateTest.php::`SendInstructionState Enum` → it correctly identifies which instructions can be deleted" class="Tests\Enums\SendInstructionStateTest" classname="Tests.Enums.SendInstructionStateTest" assertions="4" time="0.057450"/>
      </testsuite>
      <testsuite name="Tests\Events\EventsTest" file="tests/Events/EventsTest.php" tests="16" assertions="39" errors="0" failures="0" skipped="0" time="0.933074">
        <testcase name="`PurchaseCreated Event` → it creates event with purchase data" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it creates event with purchase data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.065888"/>
        <testcase name="`PurchaseCreated Event` → it implements ShouldBroadcast interface" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it implements ShouldBroadcast interface" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.056576"/>
        <testcase name="`PurchaseCreated Event` → it broadcasts on purchase channel" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts on purchase channel" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.056781"/>
        <testcase name="`PurchaseCreated Event` → it broadcasts with correct data" file="tests/Events/EventsTest.php::`PurchaseCreated Event` → it broadcasts with correct data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.056328"/>
        <testcase name="`PurchasePaid Event` → it creates event with paid purchase data" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it creates event with paid purchase data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.057174"/>
        <testcase name="`PurchasePaid Event` → it implements ShouldBroadcast interface" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it implements ShouldBroadcast interface" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.058409"/>
        <testcase name="`PurchasePaid Event` → it broadcasts on purchase channel" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it broadcasts on purchase channel" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.056355"/>
        <testcase name="`PurchasePaid Event` → it includes payment timestamp in broadcast data" file="tests/Events/EventsTest.php::`PurchasePaid Event` → it includes payment timestamp in broadcast data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.057208"/>
        <testcase name="`WebhookReceived Event` → it creates event with webhook data" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it creates event with webhook data" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.059829"/>
        <testcase name="`WebhookReceived Event` → it implements ShouldQueue interface for background processing" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it implements ShouldQueue interface for background processing" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.056762"/>
        <testcase name="`WebhookReceived Event` → it stores raw webhook payload" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it stores raw webhook payload" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="2" time="0.056891"/>
        <testcase name="`WebhookReceived Event` → it can determine webhook event type" file="tests/Events/EventsTest.php::`WebhookReceived Event` → it can determine webhook event type" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.056741"/>
        <testcase name="`Event Broadcasting Configuration` → it uses correct queue for background events" file="tests/Events/EventsTest.php::`Event Broadcasting Configuration` → it uses correct queue for background events" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.057081"/>
        <testcase name="`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" file="tests/Events/EventsTest.php::`Event Broadcasting Configuration` → it sets appropriate broadcast queue for real-time events" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="1" time="0.057125"/>
        <testcase name="`Event Data Serialization` → it serializes purchase data correctly for broadcasting" file="tests/Events/EventsTest.php::`Event Data Serialization` → it serializes purchase data correctly for broadcasting" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="8" time="0.061125"/>
        <testcase name="`Event Data Serialization` → it includes event metadata in broadcast payload" file="tests/Events/EventsTest.php::`Event Data Serialization` → it includes event metadata in broadcast payload" class="Tests\Events\EventsTest" classname="Tests.Events.EventsTest" assertions="3" time="0.062801"/>
      </testsuite>
      <testsuite name="Tests\Exceptions\ExceptionsTest" file="tests/Exceptions/ExceptionsTest.php" tests="21" assertions="48" errors="0" failures="0" skipped="0" time="1.243620">
        <testcase name="`ChipApiException` → it creates exception with message and status code" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception with message and status code" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.080182"/>
        <testcase name="`ChipApiException` → it stores error details from API response" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it stores error details from API response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.060857"/>
        <testcase name="`ChipApiException` → it handles empty error details" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles empty error details" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.058177"/>
        <testcase name="`ChipApiException` → it formats error message with details" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it formats error message with details" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.057306"/>
        <testcase name="`ChipApiException` → it creates exception from HTTP response" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it creates exception from HTTP response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.057175"/>
        <testcase name="`ChipApiException` → it handles missing error message in response" file="tests/Exceptions/ExceptionsTest.php::`ChipApiException` → it handles missing error message in response" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.055684"/>
        <testcase name="`ChipValidationException` → it creates validation exception with field errors" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates validation exception with field errors" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.057217"/>
        <testcase name="`ChipValidationException` → it checks if specific field has error" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it checks if specific field has error" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.056418"/>
        <testcase name="`ChipValidationException` → it gets errors for specific field" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it gets errors for specific field" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.056573"/>
        <testcase name="`ChipValidationException` → it formats all validation errors as string" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it formats all validation errors as string" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.056878"/>
        <testcase name="`ChipValidationException` → it creates exception from Laravel validator" file="tests/Exceptions/ExceptionsTest.php::`ChipValidationException` → it creates exception from Laravel validator" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="4" time="0.067368"/>
        <testcase name="`WebhookVerificationException` → it creates exception with verification failure message" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception with verification failure message" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.057888"/>
        <testcase name="`WebhookVerificationException` → it creates exception for missing signature" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing signature" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.056299"/>
        <testcase name="`WebhookVerificationException` → it creates exception for invalid signature format" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid signature format" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.056592"/>
        <testcase name="`WebhookVerificationException` → it creates exception for signature verification failure" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for signature verification failure" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.057249"/>
        <testcase name="`WebhookVerificationException` → it creates exception for invalid payload" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for invalid payload" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.056895"/>
        <testcase name="`WebhookVerificationException` → it creates exception for missing public key" file="tests/Exceptions/ExceptionsTest.php::`WebhookVerificationException` → it creates exception for missing public key" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.061301"/>
        <testcase name="`Exception Inheritance` → it extends appropriate base exception classes" file="tests/Exceptions/ExceptionsTest.php::`Exception Inheritance` → it extends appropriate base exception classes" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.057926"/>
        <testcase name="`Exception Inheritance` → it implements custom exception interface if defined" file="tests/Exceptions/ExceptionsTest.php::`Exception Inheritance` → it implements custom exception interface if defined" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="3" time="0.059407"/>
        <testcase name="`Exception Error Context` → it preserves original exception context" file="tests/Exceptions/ExceptionsTest.php::`Exception Error Context` → it preserves original exception context" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="1" time="0.057972"/>
        <testcase name="`Exception Error Context` → it maintains error context through exception chain" file="tests/Exceptions/ExceptionsTest.php::`Exception Error Context` → it maintains error context through exception chain" class="Tests\Exceptions\ExceptionsTest" classname="Tests.Exceptions.ExceptionsTest" assertions="2" time="0.058257"/>
      </testsuite>
      <testsuite name="Tests\Feature\IntegrationTest" file="tests/Feature/IntegrationTest.php" tests="9" assertions="20" errors="0" failures="0" skipped="0" time="0.690541">
        <testcase name="`Package Integration Tests` → it loads package service provider correctly" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it loads package service provider correctly" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="3" time="0.073025"/>
        <testcase name="`Package Integration Tests` → it registers package routes" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it registers package routes" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.056180"/>
        <testcase name="`Package Integration Tests` → it publishes package migrations" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it publishes package migrations" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="6" time="0.056411"/>
        <testcase name="`Package Integration Tests` → it configures package correctly from config file" file="tests/Feature/IntegrationTest.php::`Package Integration Tests` → it configures package correctly from config file" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="3" time="0.055691"/>
        <testcase name="`End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes purchase.created webhook end-to-end" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="2" time="0.213127"/>
        <testcase name="`End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes purchase.paid webhook end-to-end" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="2" time="0.059523"/>
        <testcase name="`End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled" file="tests/Feature/IntegrationTest.php::`End-to-End Webhook Processing` → it processes webhook with invalid signature when verification is disabled" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.059751"/>
        <testcase name="`Database Persistence Integration` → it stores webhook data in database" file="tests/Feature/IntegrationTest.php::`Database Persistence Integration` → it stores webhook data in database" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.057331"/>
        <testcase name="`Database Persistence Integration` → it stores purchase data in database" file="tests/Feature/IntegrationTest.php::`Database Persistence Integration` → it stores purchase data in database" class="Tests\Feature\IntegrationTest" classname="Tests.Feature.IntegrationTest" assertions="1" time="0.059501"/>
      </testsuite>
      <testsuite name="Tests\Http\ChipCollectClientTest" file="tests/Http/ChipCollectClientTest.php" tests="14" assertions="26" errors="0" failures="0" skipped="0" time="0.808707">
        <testcase name="`ChipCollectClient Authentication` → it adds bearer token to requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it adds bearer token to requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.064198"/>
        <testcase name="`ChipCollectClient Authentication` → it sets correct content type" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Authentication` → it sets correct content type" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.055786"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make GET requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make GET requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.055848"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make POST requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make POST requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.059644"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make PUT requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make PUT requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.056235"/>
        <testcase name="`ChipCollectClient Request Methods` → it can make DELETE requests" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Request Methods` → it can make DELETE requests" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.056846"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 400 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.057268"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 401 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.056676"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 404 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.056838"/>
        <testcase name="`ChipCollectClient Error Handling` → it throws ChipApiException on 500 error" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it throws ChipApiException on 500 error" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="2" time="0.057280"/>
        <testcase name="`ChipCollectClient Error Handling` → it includes error details in exception" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Error Handling` → it includes error details in exception" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="3" time="0.057300"/>
        <testcase name="`ChipCollectClient Retry Logic` → it throws exception on server errors without retrying" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it throws exception on server errors without retrying" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="3" time="0.059181"/>
        <testcase name="`ChipCollectClient Retry Logic` → it gives up after max retries" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Retry Logic` → it gives up after max retries" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.057975"/>
        <testcase name="`ChipCollectClient Configuration` → it uses configured base URL" file="tests/Http/ChipCollectClientTest.php::`ChipCollectClient Configuration` → it uses configured base URL" class="Tests\Http\ChipCollectClientTest" classname="Tests.Http.ChipCollectClientTest" assertions="1" time="0.057630"/>
      </testsuite>
      <testsuite name="Tests\Http\ChipSendClientTest" file="tests/Http/ChipSendClientTest.php" tests="10" assertions="14" errors="0" failures="0" skipped="0" time="0.584545">
        <testcase name="`ChipSendClient Authentication` → it adds correct headers to requests" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it adds correct headers to requests" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.067298"/>
        <testcase name="`ChipSendClient Authentication` → it generates valid HMAC signature" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it generates valid HMAC signature" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.057315"/>
        <testcase name="`ChipSendClient Authentication` → it includes API key in signature generation" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Authentication` → it includes API key in signature generation" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.056401"/>
        <testcase name="`ChipSendClient Request Methods` → it can make GET requests" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make GET requests" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="2" time="0.056276"/>
        <testcase name="`ChipSendClient Request Methods` → it can make POST requests with JSON body" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Request Methods` → it can make POST requests with JSON body" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="2" time="0.056709"/>
        <testcase name="`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Error Handling` → it throws ChipValidationException with proper error details" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="3" time="0.056468"/>
        <testcase name="`ChipSendClient Error Handling` → it handles network timeouts" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Error Handling` → it handles network timeouts" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.059548"/>
        <testcase name="`ChipSendClient URL Building` → it uses sandbox URL in test mode" file="tests/Http/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses sandbox URL in test mode" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.057829"/>
        <testcase name="`ChipSendClient URL Building` → it uses production URL in live mode" file="tests/Http/ChipSendClientTest.php::`ChipSendClient URL Building` → it uses production URL in live mode" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.058099"/>
        <testcase name="`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" file="tests/Http/ChipSendClientTest.php::`ChipSendClient Timestamp Generation` → it generates current epoch timestamp" class="Tests\Http\ChipSendClientTest" classname="Tests.Http.ChipSendClientTest" assertions="1" time="0.058601"/>
      </testsuite>
      <testsuite name="Tests\Http\Requests\WebhookRequestTest" file="tests/Http/Requests/WebhookRequestTest.php" tests="16" assertions="23" errors="0" failures="0" skipped="0" time="1.190828">
        <testcase name="`WebhookRequest Validation` → it validates required event field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required event field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.066462"/>
        <testcase name="`WebhookRequest Validation` → it validates required data field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates required data field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.055769"/>
        <testcase name="`WebhookRequest Validation` → it validates event field is string" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates event field is string" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.057224"/>
        <testcase name="`WebhookRequest Validation` → it validates data field is array" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates data field is array" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.062562"/>
        <testcase name="`WebhookRequest Validation` → it passes validation with valid data" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it passes validation with valid data" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.234919"/>
        <testcase name="`WebhookRequest Validation` → it allows optional timestamp field" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it allows optional timestamp field" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.067695"/>
        <testcase name="`WebhookRequest Validation` → it validates timestamp format when provided" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Validation` → it validates timestamp format when provided" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.070480"/>
        <testcase name="`WebhookRequest Authorization` → it always authorizes webhook requests" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Authorization` → it always authorizes webhook requests" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.069131"/>
        <testcase name="`WebhookRequest Custom Methods` → it extracts webhook signature from headers" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts webhook signature from headers" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.063706"/>
        <testcase name="`WebhookRequest Custom Methods` → it returns null when signature header is missing" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null when signature header is missing" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.064443"/>
        <testcase name="`WebhookRequest Custom Methods` → it gets webhook event type" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.065336"/>
        <testcase name="`WebhookRequest Custom Methods` → it gets webhook data payload" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it gets webhook data payload" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.068906"/>
        <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is for specific event type" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.060990"/>
        <testcase name="`WebhookRequest Custom Methods` → it checks if webhook is purchase related" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it checks if webhook is purchase related" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="2" time="0.065172"/>
        <testcase name="`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it extracts purchase ID from purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.060274"/>
        <testcase name="`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" file="tests/Http/Requests/WebhookRequestTest.php::`WebhookRequest Custom Methods` → it returns null for purchase ID on non-purchase events" class="Tests\Http\Requests\WebhookRequestTest" classname="Tests.Http.Requests.WebhookRequestTest" assertions="1" time="0.057758"/>
      </testsuite>
      <testsuite name="Tests\Jobs\ProcessChipWebhookTest" file="tests/Jobs/ProcessChipWebhookTest.php" tests="6" assertions="7" errors="0" failures="0" skipped="0" time="0.524545">
        <testcase name="`Webhook Queue Handler` → it dispatches webhook processing job when queue is enabled" file="tests/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it dispatches webhook processing job when queue is enabled" class="Tests\Jobs\ProcessChipWebhookTest" classname="Tests.Jobs.ProcessChipWebhookTest" assertions="1" time="0.081248"/>
        <testcase name="`Webhook Queue Handler` → it uses configured queue name" file="tests/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it uses configured queue name" class="Tests\Jobs\ProcessChipWebhookTest" classname="Tests.Jobs.ProcessChipWebhookTest" assertions="1" time="0.056426"/>
        <testcase name="`Webhook Queue Handler` → it has 3 retry attempts configured" file="tests/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it has 3 retry attempts configured" class="Tests\Jobs\ProcessChipWebhookTest" classname="Tests.Jobs.ProcessChipWebhookTest" assertions="1" time="0.055867"/>
        <testcase name="`Webhook Queue Handler` → it has 60 second timeout configured" file="tests/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it has 60 second timeout configured" class="Tests\Jobs\ProcessChipWebhookTest" classname="Tests.Jobs.ProcessChipWebhookTest" assertions="1" time="0.169602"/>
        <testcase name="`Webhook Queue Handler` → it dispatches WebhookReceived event after processing" file="tests/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it dispatches WebhookReceived event after processing" class="Tests\Jobs\ProcessChipWebhookTest" classname="Tests.Jobs.ProcessChipWebhookTest" assertions="1" time="0.092031"/>
        <testcase name="`Webhook Queue Handler` → it provides genuinely useful async processing" file="tests/Jobs/ProcessChipWebhookTest.php::`Webhook Queue Handler` → it provides genuinely useful async processing" class="Tests\Jobs\ProcessChipWebhookTest" classname="Tests.Jobs.ProcessChipWebhookTest" assertions="2" time="0.069370"/>
      </testsuite>
      <testsuite name="Tests\Services\ChipCollectServiceTest" file="tests/Services/ChipCollectServiceTest.php" tests="8" assertions="23" errors="0" failures="0" skipped="0" time="0.475753">
        <testcase name="`ChipCollectService Public Key` → it returns the public key as a PEM string" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Public Key` → it returns the public key as a PEM string" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="3" time="0.071808"/>
        <testcase name="`ChipCollectService Purchase Management` → it can create a purchase" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can create a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="4" time="0.065304"/>
        <testcase name="`ChipCollectService Purchase Management` → it can retrieve a purchase" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can retrieve a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="3" time="0.056459"/>
        <testcase name="`ChipCollectService Purchase Management` → it can cancel a purchase" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can cancel a purchase" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="2" time="0.057916"/>
        <testcase name="`ChipCollectService Purchase Management` → it can get payment methods" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Purchase Management` → it can get payment methods" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="2" time="0.057026"/>
        <testcase name="`ChipCollectService Client Management` → it can create a client" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can create a client" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="4" time="0.055453"/>
        <testcase name="`ChipCollectService Client Management` → it can retrieve a client" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can retrieve a client" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="3" time="0.056063"/>
        <testcase name="`ChipCollectService Client Management` → it can list clients" file="tests/Services/ChipCollectServiceTest.php::`ChipCollectService Client Management` → it can list clients" class="Tests\Services\ChipCollectServiceTest" classname="Tests.Services.ChipCollectServiceTest" assertions="2" time="0.055724"/>
      </testsuite>
      <testsuite name="Tests\Services\ChipSendServiceTest" file="tests/Services/ChipSendServiceTest.php" tests="3" assertions="16" errors="0" failures="0" skipped="0" time="0.175095">
        <testcase name="`ChipSendService` → it can create a send instruction" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a send instruction" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" assertions="7" time="0.064957"/>
        <testcase name="`ChipSendService` → it can retrieve a send instruction" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can retrieve a send instruction" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" assertions="3" time="0.054977"/>
        <testcase name="`ChipSendService` → it can create a bank account" file="tests/Services/ChipSendServiceTest.php::`ChipSendService` → it can create a bank account" class="Tests\Services\ChipSendServiceTest" classname="Tests.Services.ChipSendServiceTest" assertions="6" time="0.055161"/>
      </testsuite>
      <testsuite name="Tests\Services\WebhookServiceTest" file="tests/Services/WebhookServiceTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.274690">
        <testcase name="`WebhookService` → it verifies valid webhook signatures" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it verifies valid webhook signatures" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" assertions="1" time="0.058719"/>
        <testcase name="`WebhookService` → it processes webhook events" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it processes webhook events" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" assertions="1" time="0.055469"/>
        <testcase name="`WebhookService` → it uses configured public key when available" file="tests/Services/WebhookServiceTest.php::`WebhookService` → it uses configured public key when available" class="Tests\Services\WebhookServiceTest" classname="Tests.Services.WebhookServiceTest" assertions="1" time="0.160502"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
